// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scidb_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "scidb_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace scidb_msg {

namespace {

const ::google::protobuf::Descriptor* SessionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Query_reflection_ = NULL;
const ::google::protobuf::Descriptor* Fetch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Fetch_reflection_ = NULL;
const ::google::protobuf::Descriptor* Chunk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chunk_reflection_ = NULL;
const ::google::protobuf::Descriptor* Chunk_Warning_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chunk_Warning_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_AttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_AttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_DimensionDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_DimensionDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResult_Warning_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResult_Warning_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhysicalPlan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhysicalPlan_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_ParsingContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_ParsingContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* DummyQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DummyQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourcesFileExistsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourcesFileExistsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourcesFileExistsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourcesFileExistsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Control_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Control_reflection_ = NULL;
const ::google::protobuf::Descriptor* Control_Channel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Control_Channel_reflection_ = NULL;
const ::google::protobuf::Descriptor* MpiSlaveHandshake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MpiSlaveHandshake_reflection_ = NULL;
const ::google::protobuf::Descriptor* MpiSlaveResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MpiSlaveResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MpiSlaveCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MpiSlaveCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthLogon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthLogon_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* Hangup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hangup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Liveness_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Liveness_reflection_ = NULL;
const ::google::protobuf::Descriptor* Liveness_InstanceListEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Liveness_InstanceListEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Liveness_InstanceList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Liveness_InstanceList_reflection_ = NULL;
const ::google::protobuf::Descriptor* LivenessAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LivenessAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* LivenessVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LivenessVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* LivenessVector_VersionEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LivenessVector_VersionEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* LivenessVector_Versions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LivenessVector_Versions_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderedBcastRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderedBcastRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderedBcastReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderedBcastReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Constants_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_scidb_5fmsg_2eproto() {
  protobuf_AddDesc_scidb_5fmsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "scidb_msg.proto");
  GOOGLE_CHECK(file != NULL);
  SessionInfo_descriptor_ = file->message_type(0);
  static const int SessionInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, job_priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, session_json_),
  };
  SessionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionInfo_descriptor_,
      SessionInfo::default_instance_,
      SessionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionInfo));
  Query_descriptor_ = file->message_type(1);
  static const int Query_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, afl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, program_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, query_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, multi_query_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, sub_query_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, fetch_),
  };
  Query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Query_descriptor_,
      Query::default_instance_,
      Query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Query));
  Fetch_descriptor_ = file->message_type(2);
  static const int Fetch_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fetch, attribute_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fetch, position_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fetch, obj_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fetch, array_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fetch, prefetch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fetch, fetch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fetch, session_info_),
  };
  Fetch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Fetch_descriptor_,
      Fetch::default_instance_,
      Fetch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fetch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Fetch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Fetch));
  Chunk_descriptor_ = file->message_type(3);
  static const int Chunk_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, compression_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, coordinates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, array_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, attribute_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, eof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, sparse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, rle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, decompressed_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, has_next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, next_coordinates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, obj_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, tombstone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, dest_instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, next_dest_instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, fetch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, warnings_),
  };
  Chunk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Chunk_descriptor_,
      Chunk::default_instance_,
      Chunk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Chunk));
  Chunk_Warning_descriptor_ = Chunk_descriptor_->nested_type(0);
  static const int Chunk_Warning_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk_Warning, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk_Warning, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk_Warning, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk_Warning, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk_Warning, what_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk_Warning, stringified_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk_Warning, strings_namespace_),
  };
  Chunk_Warning_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Chunk_Warning_descriptor_,
      Chunk_Warning::default_instance_,
      Chunk_Warning_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk_Warning, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk_Warning, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Chunk_Warning));
  QueryResult_descriptor_ = file->message_type(4);
  static const int QueryResult_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, array_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, dimensions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, explain_physical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, execution_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, selective_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, explain_logical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, warnings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, plugins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, exclusive_array_access_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, auto_commit_),
  };
  QueryResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_descriptor_,
      QueryResult::default_instance_,
      QueryResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult));
  QueryResult_AttributeDesc_descriptor_ = QueryResult_descriptor_->nested_type(0);
  static const int QueryResult_AttributeDesc_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttributeDesc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttributeDesc, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttributeDesc, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttributeDesc, default_compression_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttributeDesc, default_missing_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttributeDesc, default_value_),
  };
  QueryResult_AttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_AttributeDesc_descriptor_,
      QueryResult_AttributeDesc::default_instance_,
      QueryResult_AttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_AttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult_AttributeDesc));
  QueryResult_DimensionDesc_descriptor_ = QueryResult_descriptor_->nested_type(1);
  static const int QueryResult_DimensionDesc_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DimensionDesc, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DimensionDesc, start_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DimensionDesc, curr_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DimensionDesc, curr_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DimensionDesc, end_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DimensionDesc, chunk_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DimensionDesc, chunk_overlap_),
  };
  QueryResult_DimensionDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_DimensionDesc_descriptor_,
      QueryResult_DimensionDesc::default_instance_,
      QueryResult_DimensionDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DimensionDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_DimensionDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult_DimensionDesc));
  QueryResult_Warning_descriptor_ = QueryResult_descriptor_->nested_type(2);
  static const int QueryResult_Warning_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Warning, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Warning, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Warning, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Warning, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Warning, what_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Warning, stringified_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Warning, strings_namespace_),
  };
  QueryResult_Warning_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResult_Warning_descriptor_,
      QueryResult_Warning::default_instance_,
      QueryResult_Warning_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Warning, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResult_Warning, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResult_Warning));
  PhysicalPlan_descriptor_ = file->message_type(5);
  static const int PhysicalPlan_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalPlan, physical_plan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalPlan, cluster_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalPlan, session_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalPlan, query_),
  };
  PhysicalPlan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PhysicalPlan_descriptor_,
      PhysicalPlan::default_instance_,
      PhysicalPlan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalPlan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhysicalPlan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PhysicalPlan));
  Error_descriptor_ = file->message_type(6);
  static const int Error_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, what_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, errors_namespace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, short_error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, long_error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, stringified_short_error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, stringified_long_error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, parsing_context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, cluster_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, instance_id_),
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
  Error_ParsingContext_descriptor_ = Error_descriptor_->nested_type(0);
  static const int Error_ParsingContext_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_ParsingContext, query_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_ParsingContext, line_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_ParsingContext, col_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_ParsingContext, line_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_ParsingContext, col_end_),
  };
  Error_ParsingContext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_ParsingContext_descriptor_,
      Error_ParsingContext::default_instance_,
      Error_ParsingContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_ParsingContext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error_ParsingContext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error_ParsingContext));
  DummyQuery_descriptor_ = file->message_type(7);
  static const int DummyQuery_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyQuery, payload_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyQuery, cluster_uuid_),
  };
  DummyQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DummyQuery_descriptor_,
      DummyQuery::default_instance_,
      DummyQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DummyQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DummyQuery));
  ResourcesFileExistsRequest_descriptor_ = file->message_type(8);
  static const int ResourcesFileExistsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourcesFileExistsRequest, resource_request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourcesFileExistsRequest, file_path_),
  };
  ResourcesFileExistsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourcesFileExistsRequest_descriptor_,
      ResourcesFileExistsRequest::default_instance_,
      ResourcesFileExistsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourcesFileExistsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourcesFileExistsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourcesFileExistsRequest));
  ResourcesFileExistsResponse_descriptor_ = file->message_type(9);
  static const int ResourcesFileExistsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourcesFileExistsResponse, resource_request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourcesFileExistsResponse, exist_flag_),
  };
  ResourcesFileExistsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourcesFileExistsResponse_descriptor_,
      ResourcesFileExistsResponse::default_instance_,
      ResourcesFileExistsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourcesFileExistsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourcesFileExistsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourcesFileExistsResponse));
  Control_descriptor_ = file->message_type(10);
  static const int Control_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, local_gen_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, remote_gen_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, channels_),
  };
  Control_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Control_descriptor_,
      Control::default_instance_,
      Control_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Control));
  Control_Channel_descriptor_ = Control_descriptor_->nested_type(0);
  static const int Control_Channel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_Channel, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_Channel, available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_Channel, local_sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_Channel, remote_sn_),
  };
  Control_Channel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Control_Channel_descriptor_,
      Control_Channel::default_instance_,
      Control_Channel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_Channel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_Channel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Control_Channel));
  MpiSlaveHandshake_descriptor_ = file->message_type(11);
  static const int MpiSlaveHandshake_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveHandshake, cluster_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveHandshake, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveHandshake, launch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveHandshake, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveHandshake, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveHandshake, ppid_),
  };
  MpiSlaveHandshake_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MpiSlaveHandshake_descriptor_,
      MpiSlaveHandshake::default_instance_,
      MpiSlaveHandshake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveHandshake, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveHandshake, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MpiSlaveHandshake));
  MpiSlaveResult_descriptor_ = file->message_type(12);
  static const int MpiSlaveResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveResult, launch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveResult, status_),
  };
  MpiSlaveResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MpiSlaveResult_descriptor_,
      MpiSlaveResult::default_instance_,
      MpiSlaveResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MpiSlaveResult));
  MpiSlaveCommand_descriptor_ = file->message_type(13);
  static const int MpiSlaveCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveCommand, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveCommand, args_),
  };
  MpiSlaveCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MpiSlaveCommand_descriptor_,
      MpiSlaveCommand::default_instance_,
      MpiSlaveCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MpiSlaveCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MpiSlaveCommand));
  AuthLogon_descriptor_ = file->message_type(14);
  static const int AuthLogon_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthLogon, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthLogon, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthLogon, authtag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthLogon, puzzle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthLogon, signature_),
  };
  AuthLogon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthLogon_descriptor_,
      AuthLogon::default_instance_,
      AuthLogon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthLogon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthLogon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthLogon));
  AuthChallenge_descriptor_ = file->message_type(15);
  static const int AuthChallenge_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthChallenge, cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthChallenge, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthChallenge, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthChallenge, text_),
  };
  AuthChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthChallenge_descriptor_,
      AuthChallenge::default_instance_,
      AuthChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthChallenge));
  AuthResponse_descriptor_ = file->message_type(16);
  static const int AuthResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthResponse, cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthResponse, text_),
  };
  AuthResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthResponse_descriptor_,
      AuthResponse::default_instance_,
      AuthResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthResponse));
  AuthComplete_descriptor_ = file->message_type(17);
  static const int AuthComplete_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthComplete, authenticated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthComplete, reason_),
  };
  AuthComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthComplete_descriptor_,
      AuthComplete::default_instance_,
      AuthComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthComplete));
  Hangup_descriptor_ = file->message_type(18);
  static const int Hangup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hangup, code_),
  };
  Hangup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hangup_descriptor_,
      Hangup::default_instance_,
      Hangup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hangup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hangup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hangup));
  Liveness_descriptor_ = file->message_type(19);
  static const int Liveness_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Liveness, cluster_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Liveness, membership_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Liveness, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Liveness, dead_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Liveness, live_list_),
  };
  Liveness_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Liveness_descriptor_,
      Liveness::default_instance_,
      Liveness_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Liveness, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Liveness, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Liveness));
  Liveness_InstanceListEntry_descriptor_ = Liveness_descriptor_->nested_type(0);
  static const int Liveness_InstanceListEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Liveness_InstanceListEntry, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Liveness_InstanceListEntry, gen_id_),
  };
  Liveness_InstanceListEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Liveness_InstanceListEntry_descriptor_,
      Liveness_InstanceListEntry::default_instance_,
      Liveness_InstanceListEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Liveness_InstanceListEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Liveness_InstanceListEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Liveness_InstanceListEntry));
  Liveness_InstanceList_descriptor_ = Liveness_descriptor_->nested_type(1);
  static const int Liveness_InstanceList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Liveness_InstanceList, instance_entry_),
  };
  Liveness_InstanceList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Liveness_InstanceList_descriptor_,
      Liveness_InstanceList::default_instance_,
      Liveness_InstanceList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Liveness_InstanceList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Liveness_InstanceList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Liveness_InstanceList));
  LivenessAck_descriptor_ = file->message_type(20);
  static const int LivenessAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivenessAck, liveness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivenessAck, request_version_),
  };
  LivenessAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LivenessAck_descriptor_,
      LivenessAck::default_instance_,
      LivenessAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivenessAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivenessAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LivenessAck));
  LivenessVector_descriptor_ = file->message_type(21);
  static const int LivenessVector_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivenessVector, cluster_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivenessVector, versions_),
  };
  LivenessVector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LivenessVector_descriptor_,
      LivenessVector::default_instance_,
      LivenessVector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivenessVector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivenessVector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LivenessVector));
  LivenessVector_VersionEntry_descriptor_ = LivenessVector_descriptor_->nested_type(0);
  static const int LivenessVector_VersionEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivenessVector_VersionEntry, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivenessVector_VersionEntry, version_),
  };
  LivenessVector_VersionEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LivenessVector_VersionEntry_descriptor_,
      LivenessVector_VersionEntry::default_instance_,
      LivenessVector_VersionEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivenessVector_VersionEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivenessVector_VersionEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LivenessVector_VersionEntry));
  LivenessVector_Versions_descriptor_ = LivenessVector_descriptor_->nested_type(1);
  static const int LivenessVector_Versions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivenessVector_Versions, version_entry_),
  };
  LivenessVector_Versions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LivenessVector_Versions_descriptor_,
      LivenessVector_Versions::default_instance_,
      LivenessVector_Versions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivenessVector_Versions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LivenessVector_Versions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LivenessVector_Versions));
  OrderedBcastRequest_descriptor_ = file->message_type(22);
  static const int OrderedBcastRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderedBcastRequest, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderedBcastRequest, payload_message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderedBcastRequest, payload_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderedBcastRequest, vector_),
  };
  OrderedBcastRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderedBcastRequest_descriptor_,
      OrderedBcastRequest::default_instance_,
      OrderedBcastRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderedBcastRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderedBcastRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderedBcastRequest));
  OrderedBcastReply_descriptor_ = file->message_type(23);
  static const int OrderedBcastReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderedBcastReply, request_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderedBcastReply, request_instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderedBcastReply, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderedBcastReply, vector_),
  };
  OrderedBcastReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderedBcastReply_descriptor_,
      OrderedBcastReply::default_instance_,
      OrderedBcastReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderedBcastReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderedBcastReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderedBcastReply));
  Constants_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_scidb_5fmsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionInfo_descriptor_, &SessionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Query_descriptor_, &Query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Fetch_descriptor_, &Fetch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Chunk_descriptor_, &Chunk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Chunk_Warning_descriptor_, &Chunk_Warning::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_descriptor_, &QueryResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_AttributeDesc_descriptor_, &QueryResult_AttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_DimensionDesc_descriptor_, &QueryResult_DimensionDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResult_Warning_descriptor_, &QueryResult_Warning::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PhysicalPlan_descriptor_, &PhysicalPlan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_ParsingContext_descriptor_, &Error_ParsingContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DummyQuery_descriptor_, &DummyQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourcesFileExistsRequest_descriptor_, &ResourcesFileExistsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourcesFileExistsResponse_descriptor_, &ResourcesFileExistsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Control_descriptor_, &Control::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Control_Channel_descriptor_, &Control_Channel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MpiSlaveHandshake_descriptor_, &MpiSlaveHandshake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MpiSlaveResult_descriptor_, &MpiSlaveResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MpiSlaveCommand_descriptor_, &MpiSlaveCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthLogon_descriptor_, &AuthLogon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthChallenge_descriptor_, &AuthChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthResponse_descriptor_, &AuthResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthComplete_descriptor_, &AuthComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hangup_descriptor_, &Hangup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Liveness_descriptor_, &Liveness::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Liveness_InstanceListEntry_descriptor_, &Liveness_InstanceListEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Liveness_InstanceList_descriptor_, &Liveness_InstanceList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LivenessAck_descriptor_, &LivenessAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LivenessVector_descriptor_, &LivenessVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LivenessVector_VersionEntry_descriptor_, &LivenessVector_VersionEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LivenessVector_Versions_descriptor_, &LivenessVector_Versions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderedBcastRequest_descriptor_, &OrderedBcastRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderedBcastReply_descriptor_, &OrderedBcastReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_scidb_5fmsg_2eproto() {
  delete SessionInfo::default_instance_;
  delete SessionInfo_reflection_;
  delete Query::default_instance_;
  delete Query_reflection_;
  delete Query::_default_program_options_;
  delete Fetch::default_instance_;
  delete Fetch_reflection_;
  delete Chunk::default_instance_;
  delete Chunk_reflection_;
  delete Chunk_Warning::default_instance_;
  delete Chunk_Warning_reflection_;
  delete QueryResult::default_instance_;
  delete QueryResult_reflection_;
  delete QueryResult_AttributeDesc::default_instance_;
  delete QueryResult_AttributeDesc_reflection_;
  delete QueryResult_DimensionDesc::default_instance_;
  delete QueryResult_DimensionDesc_reflection_;
  delete QueryResult_Warning::default_instance_;
  delete QueryResult_Warning_reflection_;
  delete PhysicalPlan::default_instance_;
  delete PhysicalPlan_reflection_;
  delete Error::default_instance_;
  delete Error_reflection_;
  delete Error_ParsingContext::default_instance_;
  delete Error_ParsingContext_reflection_;
  delete DummyQuery::default_instance_;
  delete DummyQuery_reflection_;
  delete ResourcesFileExistsRequest::default_instance_;
  delete ResourcesFileExistsRequest_reflection_;
  delete ResourcesFileExistsResponse::default_instance_;
  delete ResourcesFileExistsResponse_reflection_;
  delete Control::default_instance_;
  delete Control_reflection_;
  delete Control_Channel::default_instance_;
  delete Control_Channel_reflection_;
  delete MpiSlaveHandshake::default_instance_;
  delete MpiSlaveHandshake_reflection_;
  delete MpiSlaveResult::default_instance_;
  delete MpiSlaveResult_reflection_;
  delete MpiSlaveCommand::default_instance_;
  delete MpiSlaveCommand_reflection_;
  delete AuthLogon::default_instance_;
  delete AuthLogon_reflection_;
  delete AuthChallenge::default_instance_;
  delete AuthChallenge_reflection_;
  delete AuthResponse::default_instance_;
  delete AuthResponse_reflection_;
  delete AuthComplete::default_instance_;
  delete AuthComplete_reflection_;
  delete Hangup::default_instance_;
  delete Hangup_reflection_;
  delete Liveness::default_instance_;
  delete Liveness_reflection_;
  delete Liveness_InstanceListEntry::default_instance_;
  delete Liveness_InstanceListEntry_reflection_;
  delete Liveness_InstanceList::default_instance_;
  delete Liveness_InstanceList_reflection_;
  delete LivenessAck::default_instance_;
  delete LivenessAck_reflection_;
  delete LivenessVector::default_instance_;
  delete LivenessVector_reflection_;
  delete LivenessVector_VersionEntry::default_instance_;
  delete LivenessVector_VersionEntry_reflection_;
  delete LivenessVector_Versions::default_instance_;
  delete LivenessVector_Versions_reflection_;
  delete OrderedBcastRequest::default_instance_;
  delete OrderedBcastRequest_reflection_;
  delete OrderedBcastReply::default_instance_;
  delete OrderedBcastReply_reflection_;
}

void protobuf_AddDesc_scidb_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017scidb_msg.proto\022\tscidb_msg\"9\n\013SessionI"
    "nfo\022\024\n\014job_priority\030\001 \001(\005\022\024\n\014session_jso"
    "n\030\002 \001(\t\"\254\001\n\005Query\022\r\n\005query\030\001 \002(\t\022\022\n\003afl\030"
    "\002 \002(\010:\005false\022 \n\017program_options\030\003 \001(\t:\007u"
    "nknown\022\025\n\nquery_kind\030\004 \001(\r:\0011\022\026\n\016multi_q"
    "uery_id\030\005 \001(\t\022\032\n\017sub_query_index\030\006 \001(\004:\001"
    "0\022\023\n\005fetch\030\007 \001(\010:\004true\"\261\001\n\005Fetch\022\024\n\014attr"
    "ibute_id\030\002 \001(\r\022\025\n\rposition_only\030\003 \001(\010\022\020\n"
    "\010obj_type\030\004 \001(\r\022\022\n\narray_name\030\005 \001(\t\022\025\n\rp"
    "refetch_size\030\006 \001(\r\022\020\n\010fetch_id\030\007 \001(\004\022,\n\014"
    "session_info\030\010 \001(\0132\026.scidb_msg.SessionIn"
    "fo\"\214\004\n\005Chunk\022\032\n\022compression_method\030\001 \001(\005"
    "\022\023\n\013coordinates\030\002 \003(\003\022\020\n\010array_id\030\003 \001(\004\022"
    "\024\n\014attribute_id\030\004 \001(\r\022\013\n\003eof\030\005 \002(\010\022\016\n\006sp"
    "arse\030\006 \001(\010\022\013\n\003rle\030\007 \001(\010\022\031\n\021decompressed_"
    "size\030\010 \001(\004\022\020\n\010has_next\030\t \001(\010\022\030\n\020next_coo"
    "rdinates\030\n \003(\003\022\020\n\010obj_type\030\013 \001(\r\022\r\n\005coun"
    "t\030\014 \001(\004\022\030\n\ttombstone\030\r \001(\010:\005false\022\025\n\rdes"
    "t_instance\030\016 \001(\004\022\032\n\022next_dest_instance\030\017"
    " \001(\004\022\020\n\010fetch_id\030\020 \001(\004\022*\n\010warnings\030\021 \003(\013"
    "2\030.scidb_msg.Chunk.Warning\032\214\001\n\007Warning\022\014"
    "\n\004code\030\001 \002(\005\022\014\n\004file\030\002 \002(\t\022\020\n\010function\030\003"
    " \002(\t\022\014\n\004line\030\004 \002(\005\022\020\n\010what_str\030\005 \002(\t\022\030\n\020"
    "stringified_code\030\006 \002(\t\022\031\n\021strings_namesp"
    "ace\030\007 \002(\t\"\267\006\n\013QueryResult\022\022\n\narray_name\030"
    "\002 \001(\t\0228\n\nattributes\030\003 \003(\0132$.scidb_msg.Qu"
    "eryResult.AttributeDesc\0228\n\ndimensions\030\004 "
    "\003(\0132$.scidb_msg.QueryResult.DimensionDes"
    "c\022\030\n\020explain_physical\030\005 \001(\t\022\026\n\016execution"
    "_time\030\006 \001(\004\022\021\n\tselective\030\007 \001(\010\022\027\n\017explai"
    "n_logical\030\010 \001(\t\0220\n\010warnings\030\t \003(\0132\036.scid"
    "b_msg.QueryResult.Warning\022\017\n\007plugins\030\n \003"
    "(\t\022\036\n\026exclusive_array_access\030\013 \001(\010\022\023\n\013au"
    "to_commit\030\014 \001(\010\032\241\001\n\rAttributeDesc\022\n\n\002id\030"
    "\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\014\n\004type\030\003 \002(\t\022\r\n\005fla"
    "gs\030\004 \002(\r\022\"\n\032default_compression_method\030\005"
    " \002(\r\022\036\n\026default_missing_reason\030\006 \002(\005\022\025\n\r"
    "default_value\030\007 \002(\014\032\226\001\n\rDimensionDesc\022\014\n"
    "\004name\030\001 \002(\t\022\021\n\tstart_min\030\002 \002(\003\022\022\n\ncurr_s"
    "tart\030\003 \002(\003\022\020\n\010curr_end\030\004 \002(\003\022\017\n\007end_max\030"
    "\005 \002(\003\022\026\n\016chunk_interval\030\006 \002(\003\022\025\n\rchunk_o"
    "verlap\030\007 \002(\003\032\214\001\n\007Warning\022\014\n\004code\030\001 \002(\005\022\014"
    "\n\004file\030\002 \002(\t\022\020\n\010function\030\003 \002(\t\022\014\n\004line\030\004"
    " \002(\005\022\020\n\010what_str\030\005 \002(\t\022\030\n\020stringified_co"
    "de\030\006 \002(\t\022\031\n\021strings_namespace\030\007 \002(\t\"\212\001\n\014"
    "PhysicalPlan\022\025\n\rphysical_plan\030\002 \002(\t\022\024\n\014c"
    "luster_uuid\030\006 \002(\t\022,\n\014session_info\030\007 \001(\0132"
    "\026.scidb_msg.SessionInfo\022\037\n\005query\030\010 \001(\0132\020"
    ".scidb_msg.Query\"\304\003\n\005Error\022\014\n\004type\030\001 \002(\005"
    "\022\014\n\004file\030\002 \001(\t\022\020\n\010function\030\003 \001(\t\022\014\n\004line"
    "\030\004 \001(\005\022\020\n\010what_str\030\005 \001(\t\022\030\n\020errors_names"
    "pace\030\006 \002(\t\022\030\n\020short_error_code\030\007 \002(\005\022\027\n\017"
    "long_error_code\030\010 \002(\005\022$\n\034stringified_sho"
    "rt_error_code\030\t \001(\t\022#\n\033stringified_long_"
    "error_code\030\n \001(\t\0228\n\017parsing_context\030\013 \001("
    "\0132\037.scidb_msg.Error.ParsingContext\022\024\n\014cl"
    "uster_uuid\030\014 \001(\t\022\023\n\013instance_id\030\r \001(\004\032p\n"
    "\016ParsingContext\022\024\n\014query_string\030\001 \002(\t\022\022\n"
    "\nline_start\030\002 \002(\r\022\021\n\tcol_start\030\003 \002(\r\022\020\n\010"
    "line_end\030\004 \002(\r\022\017\n\007col_end\030\005 \002(\r\"6\n\nDummy"
    "Query\022\022\n\npayload_id\030\002 \001(\004\022\024\n\014cluster_uui"
    "d\030\003 \001(\t\"L\n\032ResourcesFileExistsRequest\022\033\n"
    "\023resource_request_id\030\001 \002(\004\022\021\n\tfile_path\030"
    "\002 \002(\t\"N\n\033ResourcesFileExistsResponse\022\033\n\023"
    "resource_request_id\030\001 \002(\004\022\022\n\nexist_flag\030"
    "\002 \002(\010\"\263\001\n\007Control\022\024\n\014local_gen_id\030\001 \002(\004\022"
    "\025\n\rremote_gen_id\030\002 \002(\004\022,\n\010channels\030\003 \003(\013"
    "2\032.scidb_msg.Control.Channel\032M\n\007Channel\022"
    "\n\n\002id\030\001 \002(\r\022\021\n\tavailable\030\002 \002(\004\022\020\n\010local_"
    "sn\030\003 \002(\004\022\021\n\tremote_sn\030\004 \002(\004\"z\n\021MpiSlaveH"
    "andshake\022\024\n\014cluster_uuid\030\001 \002(\t\022\023\n\013instan"
    "ce_id\030\002 \002(\004\022\021\n\tlaunch_id\030\003 \002(\004\022\014\n\004rank\030\004"
    " \002(\004\022\013\n\003pid\030\005 \002(\005\022\014\n\004ppid\030\006 \002(\005\"3\n\016MpiSl"
    "aveResult\022\021\n\tlaunch_id\030\001 \002(\004\022\016\n\006status\030\003"
    " \002(\003\"0\n\017MpiSlaveCommand\022\017\n\007command\030\001 \002(\t"
    "\022\014\n\004args\030\002 \003(\t\"f\n\tAuthLogon\022\020\n\010username\030"
    "\001 \002(\t\022\023\n\010priority\030\002 \001(\005:\0010\022\017\n\007authtag\030\003 "
    "\001(\t\022\016\n\006puzzle\030\004 \001(\014\022\021\n\tsignature\030\005 \001(\014\"K"
    "\n\rAuthChallenge\022\016\n\006cookie\030\001 \002(\r\022\016\n\006metho"
    "d\030\002 \001(\021\022\014\n\004code\030\003 \001(\021\022\014\n\004text\030\004 \001(\t\",\n\014A"
    "uthResponse\022\016\n\006cookie\030\001 \002(\r\022\014\n\004text\030\002 \001("
    "\t\"5\n\014AuthComplete\022\025\n\rauthenticated\030\001 \002(\010"
    "\022\016\n\006reason\030\002 \001(\t\"\026\n\006Hangup\022\014\n\004code\030\001 \001(\021"
    "\"\273\002\n\010Liveness\022\024\n\014cluster_uuid\030\006 \002(\t\022\025\n\rm"
    "embership_id\030\003 \002(\004\022\017\n\007version\030\002 \002(\004\0223\n\td"
    "ead_list\030\004 \002(\0132 .scidb_msg.Liveness.Inst"
    "anceList\0223\n\tlive_list\030\005 \002(\0132 .scidb_msg."
    "Liveness.InstanceList\0328\n\021InstanceListEnt"
    "ry\022\023\n\013instance_id\030\002 \002(\004\022\016\n\006gen_id\030\003 \002(\004\032"
    "M\n\014InstanceList\022=\n\016instance_entry\030\002 \003(\0132"
    "%.scidb_msg.Liveness.InstanceListEntry\"M"
    "\n\013LivenessAck\022%\n\010liveness\030\002 \002(\0132\023.scidb_"
    "msg.Liveness\022\027\n\017request_version\030\003 \002(\004\"\335\001"
    "\n\016LivenessVector\022\024\n\014cluster_uuid\030\002 \002(\t\0224"
    "\n\010versions\030\003 \002(\0132\".scidb_msg.LivenessVec"
    "tor.Versions\0324\n\014VersionEntry\022\023\n\013instance"
    "_id\030\002 \002(\004\022\017\n\007version\030\003 \002(\004\032I\n\010Versions\022="
    "\n\rversion_entry\030\002 \003(\0132&.scidb_msg.Livene"
    "ssVector.VersionEntry\"\212\001\n\023OrderedBcastRe"
    "quest\022\021\n\ttimestamp\030\001 \002(\004\022\034\n\024payload_mess"
    "age_type\030\002 \002(\r\022\027\n\017payload_message\030\003 \002(\014\022"
    ")\n\006vector\030\004 \002(\0132\031.scidb_msg.LivenessVect"
    "or\"\206\001\n\021OrderedBcastReply\022\031\n\021request_time"
    "stamp\030\001 \002(\004\022\030\n\020request_instance\030\002 \002(\004\022\021\n"
    "\ttimestamp\030\003 \002(\004\022)\n\006vector\030\004 \002(\0132\031.scidb"
    "_msg.LivenessVector*)\n\tConstants\022\034\n\030NET_"
    "PROTOCOL_CURRENT_VER\020\013B\026\n\024org.scidb.io.n"
    "etwork", 4286);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "scidb_msg.proto", &protobuf_RegisterTypes);
  SessionInfo::default_instance_ = new SessionInfo();
  Query::_default_program_options_ =
      new ::std::string("unknown", 7);
  Query::default_instance_ = new Query();
  Fetch::default_instance_ = new Fetch();
  Chunk::default_instance_ = new Chunk();
  Chunk_Warning::default_instance_ = new Chunk_Warning();
  QueryResult::default_instance_ = new QueryResult();
  QueryResult_AttributeDesc::default_instance_ = new QueryResult_AttributeDesc();
  QueryResult_DimensionDesc::default_instance_ = new QueryResult_DimensionDesc();
  QueryResult_Warning::default_instance_ = new QueryResult_Warning();
  PhysicalPlan::default_instance_ = new PhysicalPlan();
  Error::default_instance_ = new Error();
  Error_ParsingContext::default_instance_ = new Error_ParsingContext();
  DummyQuery::default_instance_ = new DummyQuery();
  ResourcesFileExistsRequest::default_instance_ = new ResourcesFileExistsRequest();
  ResourcesFileExistsResponse::default_instance_ = new ResourcesFileExistsResponse();
  Control::default_instance_ = new Control();
  Control_Channel::default_instance_ = new Control_Channel();
  MpiSlaveHandshake::default_instance_ = new MpiSlaveHandshake();
  MpiSlaveResult::default_instance_ = new MpiSlaveResult();
  MpiSlaveCommand::default_instance_ = new MpiSlaveCommand();
  AuthLogon::default_instance_ = new AuthLogon();
  AuthChallenge::default_instance_ = new AuthChallenge();
  AuthResponse::default_instance_ = new AuthResponse();
  AuthComplete::default_instance_ = new AuthComplete();
  Hangup::default_instance_ = new Hangup();
  Liveness::default_instance_ = new Liveness();
  Liveness_InstanceListEntry::default_instance_ = new Liveness_InstanceListEntry();
  Liveness_InstanceList::default_instance_ = new Liveness_InstanceList();
  LivenessAck::default_instance_ = new LivenessAck();
  LivenessVector::default_instance_ = new LivenessVector();
  LivenessVector_VersionEntry::default_instance_ = new LivenessVector_VersionEntry();
  LivenessVector_Versions::default_instance_ = new LivenessVector_Versions();
  OrderedBcastRequest::default_instance_ = new OrderedBcastRequest();
  OrderedBcastReply::default_instance_ = new OrderedBcastReply();
  SessionInfo::default_instance_->InitAsDefaultInstance();
  Query::default_instance_->InitAsDefaultInstance();
  Fetch::default_instance_->InitAsDefaultInstance();
  Chunk::default_instance_->InitAsDefaultInstance();
  Chunk_Warning::default_instance_->InitAsDefaultInstance();
  QueryResult::default_instance_->InitAsDefaultInstance();
  QueryResult_AttributeDesc::default_instance_->InitAsDefaultInstance();
  QueryResult_DimensionDesc::default_instance_->InitAsDefaultInstance();
  QueryResult_Warning::default_instance_->InitAsDefaultInstance();
  PhysicalPlan::default_instance_->InitAsDefaultInstance();
  Error::default_instance_->InitAsDefaultInstance();
  Error_ParsingContext::default_instance_->InitAsDefaultInstance();
  DummyQuery::default_instance_->InitAsDefaultInstance();
  ResourcesFileExistsRequest::default_instance_->InitAsDefaultInstance();
  ResourcesFileExistsResponse::default_instance_->InitAsDefaultInstance();
  Control::default_instance_->InitAsDefaultInstance();
  Control_Channel::default_instance_->InitAsDefaultInstance();
  MpiSlaveHandshake::default_instance_->InitAsDefaultInstance();
  MpiSlaveResult::default_instance_->InitAsDefaultInstance();
  MpiSlaveCommand::default_instance_->InitAsDefaultInstance();
  AuthLogon::default_instance_->InitAsDefaultInstance();
  AuthChallenge::default_instance_->InitAsDefaultInstance();
  AuthResponse::default_instance_->InitAsDefaultInstance();
  AuthComplete::default_instance_->InitAsDefaultInstance();
  Hangup::default_instance_->InitAsDefaultInstance();
  Liveness::default_instance_->InitAsDefaultInstance();
  Liveness_InstanceListEntry::default_instance_->InitAsDefaultInstance();
  Liveness_InstanceList::default_instance_->InitAsDefaultInstance();
  LivenessAck::default_instance_->InitAsDefaultInstance();
  LivenessVector::default_instance_->InitAsDefaultInstance();
  LivenessVector_VersionEntry::default_instance_->InitAsDefaultInstance();
  LivenessVector_Versions::default_instance_->InitAsDefaultInstance();
  OrderedBcastRequest::default_instance_->InitAsDefaultInstance();
  OrderedBcastReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_scidb_5fmsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_scidb_5fmsg_2eproto {
  StaticDescriptorInitializer_scidb_5fmsg_2eproto() {
    protobuf_AddDesc_scidb_5fmsg_2eproto();
  }
} static_descriptor_initializer_scidb_5fmsg_2eproto_;
const ::google::protobuf::EnumDescriptor* Constants_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Constants_descriptor_;
}
bool Constants_IsValid(int value) {
  switch(value) {
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SessionInfo::kJobPriorityFieldNumber;
const int SessionInfo::kSessionJsonFieldNumber;
#endif  // !_MSC_VER

SessionInfo::SessionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.SessionInfo)
}

void SessionInfo::InitAsDefaultInstance() {
}

SessionInfo::SessionInfo(const SessionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.SessionInfo)
}

void SessionInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  job_priority_ = 0;
  session_json_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionInfo::~SessionInfo() {
  // @@protoc_insertion_point(destructor:scidb_msg.SessionInfo)
  SharedDtor();
}

void SessionInfo::SharedDtor() {
  if (session_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_json_;
  }
  if (this != default_instance_) {
  }
}

void SessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionInfo_descriptor_;
}

const SessionInfo& SessionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

SessionInfo* SessionInfo::default_instance_ = NULL;

SessionInfo* SessionInfo::New() const {
  return new SessionInfo;
}

void SessionInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    job_priority_ = 0;
    if (has_session_json()) {
      if (session_json_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_json_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.SessionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 job_priority = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_priority_)));
          set_has_job_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_json;
        break;
      }

      // optional string session_json = 2;
      case 2: {
        if (tag == 18) {
         parse_session_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_json()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_json().data(), this->session_json().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session_json");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.SessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.SessionInfo)
  return false;
#undef DO_
}

void SessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.SessionInfo)
  // optional int32 job_priority = 1;
  if (has_job_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->job_priority(), output);
  }

  // optional string session_json = 2;
  if (has_session_json()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_json().data(), this->session_json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_json(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.SessionInfo)
}

::google::protobuf::uint8* SessionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.SessionInfo)
  // optional int32 job_priority = 1;
  if (has_job_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->job_priority(), target);
  }

  // optional string session_json = 2;
  if (has_session_json()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_json().data(), this->session_json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_json(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.SessionInfo)
  return target;
}

int SessionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 job_priority = 1;
    if (has_job_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_priority());
    }

    // optional string session_json = 2;
    if (has_session_json()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_json());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionInfo::MergeFrom(const SessionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_job_priority()) {
      set_job_priority(from.job_priority());
    }
    if (from.has_session_json()) {
      set_session_json(from.session_json());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionInfo::CopyFrom(const SessionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionInfo::IsInitialized() const {

  return true;
}

void SessionInfo::Swap(SessionInfo* other) {
  if (other != this) {
    std::swap(job_priority_, other->job_priority_);
    std::swap(session_json_, other->session_json_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionInfo_descriptor_;
  metadata.reflection = SessionInfo_reflection_;
  return metadata;
}


// ===================================================================

::std::string* Query::_default_program_options_ = NULL;
#ifndef _MSC_VER
const int Query::kQueryFieldNumber;
const int Query::kAflFieldNumber;
const int Query::kProgramOptionsFieldNumber;
const int Query::kQueryKindFieldNumber;
const int Query::kMultiQueryIdFieldNumber;
const int Query::kSubQueryIndexFieldNumber;
const int Query::kFetchFieldNumber;
#endif  // !_MSC_VER

Query::Query()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.Query)
}

void Query::InitAsDefaultInstance() {
}

Query::Query(const Query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.Query)
}

void Query::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  query_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  afl_ = false;
  program_options_ = const_cast< ::std::string*>(_default_program_options_);
  query_kind_ = 1u;
  multi_query_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sub_query_index_ = GOOGLE_ULONGLONG(0);
  fetch_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Query::~Query() {
  // @@protoc_insertion_point(destructor:scidb_msg.Query)
  SharedDtor();
}

void Query::SharedDtor() {
  if (query_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete query_;
  }
  if (program_options_ != _default_program_options_) {
    delete program_options_;
  }
  if (multi_query_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete multi_query_id_;
  }
  if (this != default_instance_) {
  }
}

void Query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Query_descriptor_;
}

const Query& Query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

Query* Query::default_instance_ = NULL;

Query* Query::New() const {
  return new Query;
}

void Query::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    if (has_query()) {
      if (query_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        query_->clear();
      }
    }
    afl_ = false;
    if (has_program_options()) {
      if (program_options_ != _default_program_options_) {
        program_options_->assign(*_default_program_options_);
      }
    }
    query_kind_ = 1u;
    if (has_multi_query_id()) {
      if (multi_query_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        multi_query_id_->clear();
      }
    }
    sub_query_index_ = GOOGLE_ULONGLONG(0);
    fetch_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.Query)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string query = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "query");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_afl;
        break;
      }

      // required bool afl = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_afl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &afl_)));
          set_has_afl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_program_options;
        break;
      }

      // optional string program_options = 3 [default = "unknown"];
      case 3: {
        if (tag == 26) {
         parse_program_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_program_options()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->program_options().data(), this->program_options().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "program_options");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_query_kind;
        break;
      }

      // optional uint32 query_kind = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_query_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_kind_)));
          set_has_query_kind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_multi_query_id;
        break;
      }

      // optional string multi_query_id = 5;
      case 5: {
        if (tag == 42) {
         parse_multi_query_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multi_query_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->multi_query_id().data(), this->multi_query_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "multi_query_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sub_query_index;
        break;
      }

      // optional uint64 sub_query_index = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_sub_query_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sub_query_index_)));
          set_has_sub_query_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fetch;
        break;
      }

      // optional bool fetch = 7 [default = true];
      case 7: {
        if (tag == 56) {
         parse_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetch_)));
          set_has_fetch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.Query)
  return false;
#undef DO_
}

void Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.Query)
  // required string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "query");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query(), output);
  }

  // required bool afl = 2 [default = false];
  if (has_afl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->afl(), output);
  }

  // optional string program_options = 3 [default = "unknown"];
  if (has_program_options()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->program_options().data(), this->program_options().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "program_options");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->program_options(), output);
  }

  // optional uint32 query_kind = 4 [default = 1];
  if (has_query_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->query_kind(), output);
  }

  // optional string multi_query_id = 5;
  if (has_multi_query_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->multi_query_id().data(), this->multi_query_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "multi_query_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->multi_query_id(), output);
  }

  // optional uint64 sub_query_index = 6 [default = 0];
  if (has_sub_query_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->sub_query_index(), output);
  }

  // optional bool fetch = 7 [default = true];
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->fetch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.Query)
}

::google::protobuf::uint8* Query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.Query)
  // required string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "query");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }

  // required bool afl = 2 [default = false];
  if (has_afl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->afl(), target);
  }

  // optional string program_options = 3 [default = "unknown"];
  if (has_program_options()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->program_options().data(), this->program_options().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "program_options");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->program_options(), target);
  }

  // optional uint32 query_kind = 4 [default = 1];
  if (has_query_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->query_kind(), target);
  }

  // optional string multi_query_id = 5;
  if (has_multi_query_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->multi_query_id().data(), this->multi_query_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "multi_query_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->multi_query_id(), target);
  }

  // optional uint64 sub_query_index = 6 [default = 0];
  if (has_sub_query_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->sub_query_index(), target);
  }

  // optional bool fetch = 7 [default = true];
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->fetch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.Query)
  return target;
}

int Query::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }

    // required bool afl = 2 [default = false];
    if (has_afl()) {
      total_size += 1 + 1;
    }

    // optional string program_options = 3 [default = "unknown"];
    if (has_program_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->program_options());
    }

    // optional uint32 query_kind = 4 [default = 1];
    if (has_query_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_kind());
    }

    // optional string multi_query_id = 5;
    if (has_multi_query_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->multi_query_id());
    }

    // optional uint64 sub_query_index = 6 [default = 0];
    if (has_sub_query_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sub_query_index());
    }

    // optional bool fetch = 7 [default = true];
    if (has_fetch()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Query::MergeFrom(const Query& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query()) {
      set_query(from.query());
    }
    if (from.has_afl()) {
      set_afl(from.afl());
    }
    if (from.has_program_options()) {
      set_program_options(from.program_options());
    }
    if (from.has_query_kind()) {
      set_query_kind(from.query_kind());
    }
    if (from.has_multi_query_id()) {
      set_multi_query_id(from.multi_query_id());
    }
    if (from.has_sub_query_index()) {
      set_sub_query_index(from.sub_query_index());
    }
    if (from.has_fetch()) {
      set_fetch(from.fetch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Query::CopyFrom(const Query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Query::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Query::Swap(Query* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(afl_, other->afl_);
    std::swap(program_options_, other->program_options_);
    std::swap(query_kind_, other->query_kind_);
    std::swap(multi_query_id_, other->multi_query_id_);
    std::swap(sub_query_index_, other->sub_query_index_);
    std::swap(fetch_, other->fetch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Query_descriptor_;
  metadata.reflection = Query_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Fetch::kAttributeIdFieldNumber;
const int Fetch::kPositionOnlyFieldNumber;
const int Fetch::kObjTypeFieldNumber;
const int Fetch::kArrayNameFieldNumber;
const int Fetch::kPrefetchSizeFieldNumber;
const int Fetch::kFetchIdFieldNumber;
const int Fetch::kSessionInfoFieldNumber;
#endif  // !_MSC_VER

Fetch::Fetch()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.Fetch)
}

void Fetch::InitAsDefaultInstance() {
  session_info_ = const_cast< ::scidb_msg::SessionInfo*>(&::scidb_msg::SessionInfo::default_instance());
}

Fetch::Fetch(const Fetch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.Fetch)
}

void Fetch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  attribute_id_ = 0u;
  position_only_ = false;
  obj_type_ = 0u;
  array_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prefetch_size_ = 0u;
  fetch_id_ = GOOGLE_ULONGLONG(0);
  session_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Fetch::~Fetch() {
  // @@protoc_insertion_point(destructor:scidb_msg.Fetch)
  SharedDtor();
}

void Fetch::SharedDtor() {
  if (array_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete array_name_;
  }
  if (this != default_instance_) {
    delete session_info_;
  }
}

void Fetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Fetch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Fetch_descriptor_;
}

const Fetch& Fetch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

Fetch* Fetch::default_instance_ = NULL;

Fetch* Fetch::New() const {
  return new Fetch;
}

void Fetch::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Fetch*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(attribute_id_, position_only_);
    ZR_(obj_type_, fetch_id_);
    if (has_array_name()) {
      if (array_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        array_name_->clear();
      }
    }
    if (has_session_info()) {
      if (session_info_ != NULL) session_info_->::scidb_msg::SessionInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Fetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.Fetch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attribute_id = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_id_)));
          set_has_attribute_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_position_only;
        break;
      }

      // optional bool position_only = 3;
      case 3: {
        if (tag == 24) {
         parse_position_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &position_only_)));
          set_has_position_only();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_obj_type;
        break;
      }

      // optional uint32 obj_type = 4;
      case 4: {
        if (tag == 32) {
         parse_obj_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_type_)));
          set_has_obj_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_array_name;
        break;
      }

      // optional string array_name = 5;
      case 5: {
        if (tag == 42) {
         parse_array_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_array_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->array_name().data(), this->array_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "array_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_prefetch_size;
        break;
      }

      // optional uint32 prefetch_size = 6;
      case 6: {
        if (tag == 48) {
         parse_prefetch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prefetch_size_)));
          set_has_prefetch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_fetch_id;
        break;
      }

      // optional uint64 fetch_id = 7;
      case 7: {
        if (tag == 56) {
         parse_fetch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fetch_id_)));
          set_has_fetch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_session_info;
        break;
      }

      // optional .scidb_msg.SessionInfo session_info = 8;
      case 8: {
        if (tag == 66) {
         parse_session_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.Fetch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.Fetch)
  return false;
#undef DO_
}

void Fetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.Fetch)
  // optional uint32 attribute_id = 2;
  if (has_attribute_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attribute_id(), output);
  }

  // optional bool position_only = 3;
  if (has_position_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->position_only(), output);
  }

  // optional uint32 obj_type = 4;
  if (has_obj_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->obj_type(), output);
  }

  // optional string array_name = 5;
  if (has_array_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->array_name().data(), this->array_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "array_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->array_name(), output);
  }

  // optional uint32 prefetch_size = 6;
  if (has_prefetch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->prefetch_size(), output);
  }

  // optional uint64 fetch_id = 7;
  if (has_fetch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->fetch_id(), output);
  }

  // optional .scidb_msg.SessionInfo session_info = 8;
  if (has_session_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->session_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.Fetch)
}

::google::protobuf::uint8* Fetch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.Fetch)
  // optional uint32 attribute_id = 2;
  if (has_attribute_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attribute_id(), target);
  }

  // optional bool position_only = 3;
  if (has_position_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->position_only(), target);
  }

  // optional uint32 obj_type = 4;
  if (has_obj_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->obj_type(), target);
  }

  // optional string array_name = 5;
  if (has_array_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->array_name().data(), this->array_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "array_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->array_name(), target);
  }

  // optional uint32 prefetch_size = 6;
  if (has_prefetch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->prefetch_size(), target);
  }

  // optional uint64 fetch_id = 7;
  if (has_fetch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->fetch_id(), target);
  }

  // optional .scidb_msg.SessionInfo session_info = 8;
  if (has_session_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->session_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.Fetch)
  return target;
}

int Fetch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attribute_id = 2;
    if (has_attribute_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_id());
    }

    // optional bool position_only = 3;
    if (has_position_only()) {
      total_size += 1 + 1;
    }

    // optional uint32 obj_type = 4;
    if (has_obj_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obj_type());
    }

    // optional string array_name = 5;
    if (has_array_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->array_name());
    }

    // optional uint32 prefetch_size = 6;
    if (has_prefetch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prefetch_size());
    }

    // optional uint64 fetch_id = 7;
    if (has_fetch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fetch_id());
    }

    // optional .scidb_msg.SessionInfo session_info = 8;
    if (has_session_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Fetch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Fetch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Fetch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Fetch::MergeFrom(const Fetch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attribute_id()) {
      set_attribute_id(from.attribute_id());
    }
    if (from.has_position_only()) {
      set_position_only(from.position_only());
    }
    if (from.has_obj_type()) {
      set_obj_type(from.obj_type());
    }
    if (from.has_array_name()) {
      set_array_name(from.array_name());
    }
    if (from.has_prefetch_size()) {
      set_prefetch_size(from.prefetch_size());
    }
    if (from.has_fetch_id()) {
      set_fetch_id(from.fetch_id());
    }
    if (from.has_session_info()) {
      mutable_session_info()->::scidb_msg::SessionInfo::MergeFrom(from.session_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Fetch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Fetch::CopyFrom(const Fetch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fetch::IsInitialized() const {

  return true;
}

void Fetch::Swap(Fetch* other) {
  if (other != this) {
    std::swap(attribute_id_, other->attribute_id_);
    std::swap(position_only_, other->position_only_);
    std::swap(obj_type_, other->obj_type_);
    std::swap(array_name_, other->array_name_);
    std::swap(prefetch_size_, other->prefetch_size_);
    std::swap(fetch_id_, other->fetch_id_);
    std::swap(session_info_, other->session_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Fetch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Fetch_descriptor_;
  metadata.reflection = Fetch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Chunk_Warning::kCodeFieldNumber;
const int Chunk_Warning::kFileFieldNumber;
const int Chunk_Warning::kFunctionFieldNumber;
const int Chunk_Warning::kLineFieldNumber;
const int Chunk_Warning::kWhatStrFieldNumber;
const int Chunk_Warning::kStringifiedCodeFieldNumber;
const int Chunk_Warning::kStringsNamespaceFieldNumber;
#endif  // !_MSC_VER

Chunk_Warning::Chunk_Warning()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.Chunk.Warning)
}

void Chunk_Warning::InitAsDefaultInstance() {
}

Chunk_Warning::Chunk_Warning(const Chunk_Warning& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.Chunk.Warning)
}

void Chunk_Warning::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_ = 0;
  what_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stringified_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strings_namespace_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Chunk_Warning::~Chunk_Warning() {
  // @@protoc_insertion_point(destructor:scidb_msg.Chunk.Warning)
  SharedDtor();
}

void Chunk_Warning::SharedDtor() {
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_;
  }
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_;
  }
  if (what_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete what_str_;
  }
  if (stringified_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stringified_code_;
  }
  if (strings_namespace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strings_namespace_;
  }
  if (this != default_instance_) {
  }
}

void Chunk_Warning::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chunk_Warning::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chunk_Warning_descriptor_;
}

const Chunk_Warning& Chunk_Warning::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

Chunk_Warning* Chunk_Warning::default_instance_ = NULL;

Chunk_Warning* Chunk_Warning::New() const {
  return new Chunk_Warning;
}

void Chunk_Warning::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Chunk_Warning*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(code_, line_);
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_->clear();
      }
    }
    if (has_function()) {
      if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        function_->clear();
      }
    }
    if (has_what_str()) {
      if (what_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        what_str_->clear();
      }
    }
    if (has_stringified_code()) {
      if (stringified_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stringified_code_->clear();
      }
    }
    if (has_strings_namespace()) {
      if (strings_namespace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strings_namespace_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Chunk_Warning::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.Chunk.Warning)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file;
        break;
      }

      // required string file = 2;
      case 2: {
        if (tag == 18) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_function;
        break;
      }

      // required string function = 3;
      case 3: {
        if (tag == 26) {
         parse_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->function().data(), this->function().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "function");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_line;
        break;
      }

      // required int32 line = 4;
      case 4: {
        if (tag == 32) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_what_str;
        break;
      }

      // required string what_str = 5;
      case 5: {
        if (tag == 42) {
         parse_what_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_what_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->what_str().data(), this->what_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "what_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_stringified_code;
        break;
      }

      // required string stringified_code = 6;
      case 6: {
        if (tag == 50) {
         parse_stringified_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringified_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stringified_code().data(), this->stringified_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stringified_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_strings_namespace;
        break;
      }

      // required string strings_namespace = 7;
      case 7: {
        if (tag == 58) {
         parse_strings_namespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strings_namespace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strings_namespace().data(), this->strings_namespace().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strings_namespace");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.Chunk.Warning)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.Chunk.Warning)
  return false;
#undef DO_
}

void Chunk_Warning::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.Chunk.Warning)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required string file = 2;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file(), output);
  }

  // required string function = 3;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->function(), output);
  }

  // required int32 line = 4;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->line(), output);
  }

  // required string what_str = 5;
  if (has_what_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->what_str().data(), this->what_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "what_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->what_str(), output);
  }

  // required string stringified_code = 6;
  if (has_stringified_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stringified_code().data(), this->stringified_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stringified_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->stringified_code(), output);
  }

  // required string strings_namespace = 7;
  if (has_strings_namespace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strings_namespace().data(), this->strings_namespace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strings_namespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->strings_namespace(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.Chunk.Warning)
}

::google::protobuf::uint8* Chunk_Warning::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.Chunk.Warning)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required string file = 2;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file(), target);
  }

  // required string function = 3;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->function(), target);
  }

  // required int32 line = 4;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->line(), target);
  }

  // required string what_str = 5;
  if (has_what_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->what_str().data(), this->what_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "what_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->what_str(), target);
  }

  // required string stringified_code = 6;
  if (has_stringified_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stringified_code().data(), this->stringified_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stringified_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->stringified_code(), target);
  }

  // required string strings_namespace = 7;
  if (has_strings_namespace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strings_namespace().data(), this->strings_namespace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strings_namespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->strings_namespace(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.Chunk.Warning)
  return target;
}

int Chunk_Warning::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required string file = 2;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }

    // required string function = 3;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->function());
    }

    // required int32 line = 4;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line());
    }

    // required string what_str = 5;
    if (has_what_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->what_str());
    }

    // required string stringified_code = 6;
    if (has_stringified_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringified_code());
    }

    // required string strings_namespace = 7;
    if (has_strings_namespace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strings_namespace());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chunk_Warning::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Chunk_Warning* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Chunk_Warning*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Chunk_Warning::MergeFrom(const Chunk_Warning& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
    if (from.has_what_str()) {
      set_what_str(from.what_str());
    }
    if (from.has_stringified_code()) {
      set_stringified_code(from.stringified_code());
    }
    if (from.has_strings_namespace()) {
      set_strings_namespace(from.strings_namespace());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Chunk_Warning::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chunk_Warning::CopyFrom(const Chunk_Warning& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chunk_Warning::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void Chunk_Warning::Swap(Chunk_Warning* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(file_, other->file_);
    std::swap(function_, other->function_);
    std::swap(line_, other->line_);
    std::swap(what_str_, other->what_str_);
    std::swap(stringified_code_, other->stringified_code_);
    std::swap(strings_namespace_, other->strings_namespace_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Chunk_Warning::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chunk_Warning_descriptor_;
  metadata.reflection = Chunk_Warning_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Chunk::kCompressionMethodFieldNumber;
const int Chunk::kCoordinatesFieldNumber;
const int Chunk::kArrayIdFieldNumber;
const int Chunk::kAttributeIdFieldNumber;
const int Chunk::kEofFieldNumber;
const int Chunk::kSparseFieldNumber;
const int Chunk::kRleFieldNumber;
const int Chunk::kDecompressedSizeFieldNumber;
const int Chunk::kHasNextFieldNumber;
const int Chunk::kNextCoordinatesFieldNumber;
const int Chunk::kObjTypeFieldNumber;
const int Chunk::kCountFieldNumber;
const int Chunk::kTombstoneFieldNumber;
const int Chunk::kDestInstanceFieldNumber;
const int Chunk::kNextDestInstanceFieldNumber;
const int Chunk::kFetchIdFieldNumber;
const int Chunk::kWarningsFieldNumber;
#endif  // !_MSC_VER

Chunk::Chunk()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.Chunk)
}

void Chunk::InitAsDefaultInstance() {
}

Chunk::Chunk(const Chunk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.Chunk)
}

void Chunk::SharedCtor() {
  _cached_size_ = 0;
  compression_method_ = 0;
  array_id_ = GOOGLE_ULONGLONG(0);
  attribute_id_ = 0u;
  eof_ = false;
  sparse_ = false;
  rle_ = false;
  decompressed_size_ = GOOGLE_ULONGLONG(0);
  has_next_ = false;
  obj_type_ = 0u;
  count_ = GOOGLE_ULONGLONG(0);
  tombstone_ = false;
  dest_instance_ = GOOGLE_ULONGLONG(0);
  next_dest_instance_ = GOOGLE_ULONGLONG(0);
  fetch_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Chunk::~Chunk() {
  // @@protoc_insertion_point(destructor:scidb_msg.Chunk)
  SharedDtor();
}

void Chunk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Chunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chunk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chunk_descriptor_;
}

const Chunk& Chunk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

Chunk* Chunk::default_instance_ = NULL;

Chunk* Chunk::New() const {
  return new Chunk;
}

void Chunk::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Chunk*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 253) {
    ZR_(compression_method_, rle_);
    decompressed_size_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 64768) {
    ZR_(has_next_, obj_type_);
    ZR_(count_, fetch_id_);
    tombstone_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  coordinates_.Clear();
  next_coordinates_.Clear();
  warnings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Chunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.Chunk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 compression_method = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compression_method_)));
          set_has_compression_method();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coordinates;
        break;
      }

      // repeated int64 coordinates = 2;
      case 2: {
        if (tag == 16) {
         parse_coordinates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_coordinates())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_coordinates())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_coordinates;
        if (input->ExpectTag(24)) goto parse_array_id;
        break;
      }

      // optional uint64 array_id = 3;
      case 3: {
        if (tag == 24) {
         parse_array_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &array_id_)));
          set_has_array_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_attribute_id;
        break;
      }

      // optional uint32 attribute_id = 4;
      case 4: {
        if (tag == 32) {
         parse_attribute_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attribute_id_)));
          set_has_attribute_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_eof;
        break;
      }

      // required bool eof = 5;
      case 5: {
        if (tag == 40) {
         parse_eof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eof_)));
          set_has_eof();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sparse;
        break;
      }

      // optional bool sparse = 6;
      case 6: {
        if (tag == 48) {
         parse_sparse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sparse_)));
          set_has_sparse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rle;
        break;
      }

      // optional bool rle = 7;
      case 7: {
        if (tag == 56) {
         parse_rle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rle_)));
          set_has_rle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_decompressed_size;
        break;
      }

      // optional uint64 decompressed_size = 8;
      case 8: {
        if (tag == 64) {
         parse_decompressed_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &decompressed_size_)));
          set_has_decompressed_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_has_next;
        break;
      }

      // optional bool has_next = 9;
      case 9: {
        if (tag == 72) {
         parse_has_next:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_next_)));
          set_has_has_next();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_next_coordinates;
        break;
      }

      // repeated int64 next_coordinates = 10;
      case 10: {
        if (tag == 80) {
         parse_next_coordinates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 80, input, this->mutable_next_coordinates())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_next_coordinates())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_next_coordinates;
        if (input->ExpectTag(88)) goto parse_obj_type;
        break;
      }

      // optional uint32 obj_type = 11;
      case 11: {
        if (tag == 88) {
         parse_obj_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_type_)));
          set_has_obj_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_count;
        break;
      }

      // optional uint64 count = 12;
      case 12: {
        if (tag == 96) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_tombstone;
        break;
      }

      // optional bool tombstone = 13 [default = false];
      case 13: {
        if (tag == 104) {
         parse_tombstone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tombstone_)));
          set_has_tombstone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_dest_instance;
        break;
      }

      // optional uint64 dest_instance = 14;
      case 14: {
        if (tag == 112) {
         parse_dest_instance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_instance_)));
          set_has_dest_instance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_next_dest_instance;
        break;
      }

      // optional uint64 next_dest_instance = 15;
      case 15: {
        if (tag == 120) {
         parse_next_dest_instance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &next_dest_instance_)));
          set_has_next_dest_instance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_fetch_id;
        break;
      }

      // optional uint64 fetch_id = 16;
      case 16: {
        if (tag == 128) {
         parse_fetch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fetch_id_)));
          set_has_fetch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_warnings;
        break;
      }

      // repeated .scidb_msg.Chunk.Warning warnings = 17;
      case 17: {
        if (tag == 138) {
         parse_warnings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_warnings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_warnings;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.Chunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.Chunk)
  return false;
#undef DO_
}

void Chunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.Chunk)
  // optional int32 compression_method = 1;
  if (has_compression_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->compression_method(), output);
  }

  // repeated int64 coordinates = 2;
  for (int i = 0; i < this->coordinates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->coordinates(i), output);
  }

  // optional uint64 array_id = 3;
  if (has_array_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->array_id(), output);
  }

  // optional uint32 attribute_id = 4;
  if (has_attribute_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attribute_id(), output);
  }

  // required bool eof = 5;
  if (has_eof()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->eof(), output);
  }

  // optional bool sparse = 6;
  if (has_sparse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->sparse(), output);
  }

  // optional bool rle = 7;
  if (has_rle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->rle(), output);
  }

  // optional uint64 decompressed_size = 8;
  if (has_decompressed_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->decompressed_size(), output);
  }

  // optional bool has_next = 9;
  if (has_has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->has_next(), output);
  }

  // repeated int64 next_coordinates = 10;
  for (int i = 0; i < this->next_coordinates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      10, this->next_coordinates(i), output);
  }

  // optional uint32 obj_type = 11;
  if (has_obj_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->obj_type(), output);
  }

  // optional uint64 count = 12;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->count(), output);
  }

  // optional bool tombstone = 13 [default = false];
  if (has_tombstone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->tombstone(), output);
  }

  // optional uint64 dest_instance = 14;
  if (has_dest_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->dest_instance(), output);
  }

  // optional uint64 next_dest_instance = 15;
  if (has_next_dest_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->next_dest_instance(), output);
  }

  // optional uint64 fetch_id = 16;
  if (has_fetch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->fetch_id(), output);
  }

  // repeated .scidb_msg.Chunk.Warning warnings = 17;
  for (int i = 0; i < this->warnings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->warnings(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.Chunk)
}

::google::protobuf::uint8* Chunk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.Chunk)
  // optional int32 compression_method = 1;
  if (has_compression_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->compression_method(), target);
  }

  // repeated int64 coordinates = 2;
  for (int i = 0; i < this->coordinates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->coordinates(i), target);
  }

  // optional uint64 array_id = 3;
  if (has_array_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->array_id(), target);
  }

  // optional uint32 attribute_id = 4;
  if (has_attribute_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attribute_id(), target);
  }

  // required bool eof = 5;
  if (has_eof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->eof(), target);
  }

  // optional bool sparse = 6;
  if (has_sparse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->sparse(), target);
  }

  // optional bool rle = 7;
  if (has_rle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->rle(), target);
  }

  // optional uint64 decompressed_size = 8;
  if (has_decompressed_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->decompressed_size(), target);
  }

  // optional bool has_next = 9;
  if (has_has_next()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->has_next(), target);
  }

  // repeated int64 next_coordinates = 10;
  for (int i = 0; i < this->next_coordinates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(10, this->next_coordinates(i), target);
  }

  // optional uint32 obj_type = 11;
  if (has_obj_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->obj_type(), target);
  }

  // optional uint64 count = 12;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->count(), target);
  }

  // optional bool tombstone = 13 [default = false];
  if (has_tombstone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->tombstone(), target);
  }

  // optional uint64 dest_instance = 14;
  if (has_dest_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->dest_instance(), target);
  }

  // optional uint64 next_dest_instance = 15;
  if (has_next_dest_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->next_dest_instance(), target);
  }

  // optional uint64 fetch_id = 16;
  if (has_fetch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->fetch_id(), target);
  }

  // repeated .scidb_msg.Chunk.Warning warnings = 17;
  for (int i = 0; i < this->warnings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->warnings(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.Chunk)
  return target;
}

int Chunk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 compression_method = 1;
    if (has_compression_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->compression_method());
    }

    // optional uint64 array_id = 3;
    if (has_array_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->array_id());
    }

    // optional uint32 attribute_id = 4;
    if (has_attribute_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attribute_id());
    }

    // required bool eof = 5;
    if (has_eof()) {
      total_size += 1 + 1;
    }

    // optional bool sparse = 6;
    if (has_sparse()) {
      total_size += 1 + 1;
    }

    // optional bool rle = 7;
    if (has_rle()) {
      total_size += 1 + 1;
    }

    // optional uint64 decompressed_size = 8;
    if (has_decompressed_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->decompressed_size());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool has_next = 9;
    if (has_has_next()) {
      total_size += 1 + 1;
    }

    // optional uint32 obj_type = 11;
    if (has_obj_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obj_type());
    }

    // optional uint64 count = 12;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->count());
    }

    // optional bool tombstone = 13 [default = false];
    if (has_tombstone()) {
      total_size += 1 + 1;
    }

    // optional uint64 dest_instance = 14;
    if (has_dest_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_instance());
    }

    // optional uint64 next_dest_instance = 15;
    if (has_next_dest_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->next_dest_instance());
    }

    // optional uint64 fetch_id = 16;
    if (has_fetch_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fetch_id());
    }

  }
  // repeated int64 coordinates = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->coordinates_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->coordinates(i));
    }
    total_size += 1 * this->coordinates_size() + data_size;
  }

  // repeated int64 next_coordinates = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->next_coordinates_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->next_coordinates(i));
    }
    total_size += 1 * this->next_coordinates_size() + data_size;
  }

  // repeated .scidb_msg.Chunk.Warning warnings = 17;
  total_size += 2 * this->warnings_size();
  for (int i = 0; i < this->warnings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->warnings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chunk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Chunk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Chunk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Chunk::MergeFrom(const Chunk& from) {
  GOOGLE_CHECK_NE(&from, this);
  coordinates_.MergeFrom(from.coordinates_);
  next_coordinates_.MergeFrom(from.next_coordinates_);
  warnings_.MergeFrom(from.warnings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_compression_method()) {
      set_compression_method(from.compression_method());
    }
    if (from.has_array_id()) {
      set_array_id(from.array_id());
    }
    if (from.has_attribute_id()) {
      set_attribute_id(from.attribute_id());
    }
    if (from.has_eof()) {
      set_eof(from.eof());
    }
    if (from.has_sparse()) {
      set_sparse(from.sparse());
    }
    if (from.has_rle()) {
      set_rle(from.rle());
    }
    if (from.has_decompressed_size()) {
      set_decompressed_size(from.decompressed_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_has_next()) {
      set_has_next(from.has_next());
    }
    if (from.has_obj_type()) {
      set_obj_type(from.obj_type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_tombstone()) {
      set_tombstone(from.tombstone());
    }
    if (from.has_dest_instance()) {
      set_dest_instance(from.dest_instance());
    }
    if (from.has_next_dest_instance()) {
      set_next_dest_instance(from.next_dest_instance());
    }
    if (from.has_fetch_id()) {
      set_fetch_id(from.fetch_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Chunk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chunk::CopyFrom(const Chunk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chunk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->warnings())) return false;
  return true;
}

void Chunk::Swap(Chunk* other) {
  if (other != this) {
    std::swap(compression_method_, other->compression_method_);
    coordinates_.Swap(&other->coordinates_);
    std::swap(array_id_, other->array_id_);
    std::swap(attribute_id_, other->attribute_id_);
    std::swap(eof_, other->eof_);
    std::swap(sparse_, other->sparse_);
    std::swap(rle_, other->rle_);
    std::swap(decompressed_size_, other->decompressed_size_);
    std::swap(has_next_, other->has_next_);
    next_coordinates_.Swap(&other->next_coordinates_);
    std::swap(obj_type_, other->obj_type_);
    std::swap(count_, other->count_);
    std::swap(tombstone_, other->tombstone_);
    std::swap(dest_instance_, other->dest_instance_);
    std::swap(next_dest_instance_, other->next_dest_instance_);
    std::swap(fetch_id_, other->fetch_id_);
    warnings_.Swap(&other->warnings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Chunk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chunk_descriptor_;
  metadata.reflection = Chunk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryResult_AttributeDesc::kIdFieldNumber;
const int QueryResult_AttributeDesc::kNameFieldNumber;
const int QueryResult_AttributeDesc::kTypeFieldNumber;
const int QueryResult_AttributeDesc::kFlagsFieldNumber;
const int QueryResult_AttributeDesc::kDefaultCompressionMethodFieldNumber;
const int QueryResult_AttributeDesc::kDefaultMissingReasonFieldNumber;
const int QueryResult_AttributeDesc::kDefaultValueFieldNumber;
#endif  // !_MSC_VER

QueryResult_AttributeDesc::QueryResult_AttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.QueryResult.AttributeDesc)
}

void QueryResult_AttributeDesc::InitAsDefaultInstance() {
}

QueryResult_AttributeDesc::QueryResult_AttributeDesc(const QueryResult_AttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.QueryResult.AttributeDesc)
}

void QueryResult_AttributeDesc::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_ = 0u;
  default_compression_method_ = 0u;
  default_missing_reason_ = 0;
  default_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult_AttributeDesc::~QueryResult_AttributeDesc() {
  // @@protoc_insertion_point(destructor:scidb_msg.QueryResult.AttributeDesc)
  SharedDtor();
}

void QueryResult_AttributeDesc::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (default_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete default_value_;
  }
  if (this != default_instance_) {
  }
}

void QueryResult_AttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult_AttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_AttributeDesc_descriptor_;
}

const QueryResult_AttributeDesc& QueryResult_AttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

QueryResult_AttributeDesc* QueryResult_AttributeDesc::default_instance_ = NULL;

QueryResult_AttributeDesc* QueryResult_AttributeDesc::New() const {
  return new QueryResult_AttributeDesc;
}

void QueryResult_AttributeDesc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryResult_AttributeDesc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, flags_);
    ZR_(default_compression_method_, default_missing_reason_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_default_value()) {
      if (default_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        default_value_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult_AttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.QueryResult.AttributeDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // required string type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flags;
        break;
      }

      // required uint32 flags = 4;
      case 4: {
        if (tag == 32) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_default_compression_method;
        break;
      }

      // required uint32 default_compression_method = 5;
      case 5: {
        if (tag == 40) {
         parse_default_compression_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &default_compression_method_)));
          set_has_default_compression_method();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_default_missing_reason;
        break;
      }

      // required int32 default_missing_reason = 6;
      case 6: {
        if (tag == 48) {
         parse_default_missing_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &default_missing_reason_)));
          set_has_default_missing_reason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_default_value;
        break;
      }

      // required bytes default_value = 7;
      case 7: {
        if (tag == 58) {
         parse_default_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_default_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.QueryResult.AttributeDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.QueryResult.AttributeDesc)
  return false;
#undef DO_
}

void QueryResult_AttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.QueryResult.AttributeDesc)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // required uint32 flags = 4;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flags(), output);
  }

  // required uint32 default_compression_method = 5;
  if (has_default_compression_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->default_compression_method(), output);
  }

  // required int32 default_missing_reason = 6;
  if (has_default_missing_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->default_missing_reason(), output);
  }

  // required bytes default_value = 7;
  if (has_default_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->default_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.QueryResult.AttributeDesc)
}

::google::protobuf::uint8* QueryResult_AttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.QueryResult.AttributeDesc)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // required uint32 flags = 4;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flags(), target);
  }

  // required uint32 default_compression_method = 5;
  if (has_default_compression_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->default_compression_method(), target);
  }

  // required int32 default_missing_reason = 6;
  if (has_default_missing_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->default_missing_reason(), target);
  }

  // required bytes default_value = 7;
  if (has_default_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->default_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.QueryResult.AttributeDesc)
  return target;
}

int QueryResult_AttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required uint32 flags = 4;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // required uint32 default_compression_method = 5;
    if (has_default_compression_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->default_compression_method());
    }

    // required int32 default_missing_reason = 6;
    if (has_default_missing_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->default_missing_reason());
    }

    // required bytes default_value = 7;
    if (has_default_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->default_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult_AttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult_AttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult_AttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult_AttributeDesc::MergeFrom(const QueryResult_AttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_default_compression_method()) {
      set_default_compression_method(from.default_compression_method());
    }
    if (from.has_default_missing_reason()) {
      set_default_missing_reason(from.default_missing_reason());
    }
    if (from.has_default_value()) {
      set_default_value(from.default_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult_AttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult_AttributeDesc::CopyFrom(const QueryResult_AttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult_AttributeDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void QueryResult_AttributeDesc::Swap(QueryResult_AttributeDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(flags_, other->flags_);
    std::swap(default_compression_method_, other->default_compression_method_);
    std::swap(default_missing_reason_, other->default_missing_reason_);
    std::swap(default_value_, other->default_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult_AttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_AttributeDesc_descriptor_;
  metadata.reflection = QueryResult_AttributeDesc_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryResult_DimensionDesc::kNameFieldNumber;
const int QueryResult_DimensionDesc::kStartMinFieldNumber;
const int QueryResult_DimensionDesc::kCurrStartFieldNumber;
const int QueryResult_DimensionDesc::kCurrEndFieldNumber;
const int QueryResult_DimensionDesc::kEndMaxFieldNumber;
const int QueryResult_DimensionDesc::kChunkIntervalFieldNumber;
const int QueryResult_DimensionDesc::kChunkOverlapFieldNumber;
#endif  // !_MSC_VER

QueryResult_DimensionDesc::QueryResult_DimensionDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.QueryResult.DimensionDesc)
}

void QueryResult_DimensionDesc::InitAsDefaultInstance() {
}

QueryResult_DimensionDesc::QueryResult_DimensionDesc(const QueryResult_DimensionDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.QueryResult.DimensionDesc)
}

void QueryResult_DimensionDesc::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_min_ = GOOGLE_LONGLONG(0);
  curr_start_ = GOOGLE_LONGLONG(0);
  curr_end_ = GOOGLE_LONGLONG(0);
  end_max_ = GOOGLE_LONGLONG(0);
  chunk_interval_ = GOOGLE_LONGLONG(0);
  chunk_overlap_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult_DimensionDesc::~QueryResult_DimensionDesc() {
  // @@protoc_insertion_point(destructor:scidb_msg.QueryResult.DimensionDesc)
  SharedDtor();
}

void QueryResult_DimensionDesc::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void QueryResult_DimensionDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult_DimensionDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_DimensionDesc_descriptor_;
}

const QueryResult_DimensionDesc& QueryResult_DimensionDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

QueryResult_DimensionDesc* QueryResult_DimensionDesc::default_instance_ = NULL;

QueryResult_DimensionDesc* QueryResult_DimensionDesc::New() const {
  return new QueryResult_DimensionDesc;
}

void QueryResult_DimensionDesc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryResult_DimensionDesc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(start_min_, chunk_overlap_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult_DimensionDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.QueryResult.DimensionDesc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_min;
        break;
      }

      // required int64 start_min = 2;
      case 2: {
        if (tag == 16) {
         parse_start_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_min_)));
          set_has_start_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_curr_start;
        break;
      }

      // required int64 curr_start = 3;
      case 3: {
        if (tag == 24) {
         parse_curr_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curr_start_)));
          set_has_curr_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curr_end;
        break;
      }

      // required int64 curr_end = 4;
      case 4: {
        if (tag == 32) {
         parse_curr_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curr_end_)));
          set_has_curr_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_end_max;
        break;
      }

      // required int64 end_max = 5;
      case 5: {
        if (tag == 40) {
         parse_end_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_max_)));
          set_has_end_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_chunk_interval;
        break;
      }

      // required int64 chunk_interval = 6;
      case 6: {
        if (tag == 48) {
         parse_chunk_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chunk_interval_)));
          set_has_chunk_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_chunk_overlap;
        break;
      }

      // required int64 chunk_overlap = 7;
      case 7: {
        if (tag == 56) {
         parse_chunk_overlap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chunk_overlap_)));
          set_has_chunk_overlap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.QueryResult.DimensionDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.QueryResult.DimensionDesc)
  return false;
#undef DO_
}

void QueryResult_DimensionDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.QueryResult.DimensionDesc)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int64 start_min = 2;
  if (has_start_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_min(), output);
  }

  // required int64 curr_start = 3;
  if (has_curr_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->curr_start(), output);
  }

  // required int64 curr_end = 4;
  if (has_curr_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->curr_end(), output);
  }

  // required int64 end_max = 5;
  if (has_end_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end_max(), output);
  }

  // required int64 chunk_interval = 6;
  if (has_chunk_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->chunk_interval(), output);
  }

  // required int64 chunk_overlap = 7;
  if (has_chunk_overlap()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->chunk_overlap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.QueryResult.DimensionDesc)
}

::google::protobuf::uint8* QueryResult_DimensionDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.QueryResult.DimensionDesc)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int64 start_min = 2;
  if (has_start_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start_min(), target);
  }

  // required int64 curr_start = 3;
  if (has_curr_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->curr_start(), target);
  }

  // required int64 curr_end = 4;
  if (has_curr_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->curr_end(), target);
  }

  // required int64 end_max = 5;
  if (has_end_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->end_max(), target);
  }

  // required int64 chunk_interval = 6;
  if (has_chunk_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->chunk_interval(), target);
  }

  // required int64 chunk_overlap = 7;
  if (has_chunk_overlap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->chunk_overlap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.QueryResult.DimensionDesc)
  return target;
}

int QueryResult_DimensionDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int64 start_min = 2;
    if (has_start_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_min());
    }

    // required int64 curr_start = 3;
    if (has_curr_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curr_start());
    }

    // required int64 curr_end = 4;
    if (has_curr_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curr_end());
    }

    // required int64 end_max = 5;
    if (has_end_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_max());
    }

    // required int64 chunk_interval = 6;
    if (has_chunk_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chunk_interval());
    }

    // required int64 chunk_overlap = 7;
    if (has_chunk_overlap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chunk_overlap());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult_DimensionDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult_DimensionDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult_DimensionDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult_DimensionDesc::MergeFrom(const QueryResult_DimensionDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_start_min()) {
      set_start_min(from.start_min());
    }
    if (from.has_curr_start()) {
      set_curr_start(from.curr_start());
    }
    if (from.has_curr_end()) {
      set_curr_end(from.curr_end());
    }
    if (from.has_end_max()) {
      set_end_max(from.end_max());
    }
    if (from.has_chunk_interval()) {
      set_chunk_interval(from.chunk_interval());
    }
    if (from.has_chunk_overlap()) {
      set_chunk_overlap(from.chunk_overlap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult_DimensionDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult_DimensionDesc::CopyFrom(const QueryResult_DimensionDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult_DimensionDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void QueryResult_DimensionDesc::Swap(QueryResult_DimensionDesc* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(start_min_, other->start_min_);
    std::swap(curr_start_, other->curr_start_);
    std::swap(curr_end_, other->curr_end_);
    std::swap(end_max_, other->end_max_);
    std::swap(chunk_interval_, other->chunk_interval_);
    std::swap(chunk_overlap_, other->chunk_overlap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult_DimensionDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_DimensionDesc_descriptor_;
  metadata.reflection = QueryResult_DimensionDesc_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryResult_Warning::kCodeFieldNumber;
const int QueryResult_Warning::kFileFieldNumber;
const int QueryResult_Warning::kFunctionFieldNumber;
const int QueryResult_Warning::kLineFieldNumber;
const int QueryResult_Warning::kWhatStrFieldNumber;
const int QueryResult_Warning::kStringifiedCodeFieldNumber;
const int QueryResult_Warning::kStringsNamespaceFieldNumber;
#endif  // !_MSC_VER

QueryResult_Warning::QueryResult_Warning()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.QueryResult.Warning)
}

void QueryResult_Warning::InitAsDefaultInstance() {
}

QueryResult_Warning::QueryResult_Warning(const QueryResult_Warning& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.QueryResult.Warning)
}

void QueryResult_Warning::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_ = 0;
  what_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stringified_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strings_namespace_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult_Warning::~QueryResult_Warning() {
  // @@protoc_insertion_point(destructor:scidb_msg.QueryResult.Warning)
  SharedDtor();
}

void QueryResult_Warning::SharedDtor() {
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_;
  }
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_;
  }
  if (what_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete what_str_;
  }
  if (stringified_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stringified_code_;
  }
  if (strings_namespace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strings_namespace_;
  }
  if (this != default_instance_) {
  }
}

void QueryResult_Warning::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult_Warning::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_Warning_descriptor_;
}

const QueryResult_Warning& QueryResult_Warning::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

QueryResult_Warning* QueryResult_Warning::default_instance_ = NULL;

QueryResult_Warning* QueryResult_Warning::New() const {
  return new QueryResult_Warning;
}

void QueryResult_Warning::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryResult_Warning*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(code_, line_);
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_->clear();
      }
    }
    if (has_function()) {
      if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        function_->clear();
      }
    }
    if (has_what_str()) {
      if (what_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        what_str_->clear();
      }
    }
    if (has_stringified_code()) {
      if (stringified_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stringified_code_->clear();
      }
    }
    if (has_strings_namespace()) {
      if (strings_namespace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strings_namespace_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult_Warning::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.QueryResult.Warning)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file;
        break;
      }

      // required string file = 2;
      case 2: {
        if (tag == 18) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_function;
        break;
      }

      // required string function = 3;
      case 3: {
        if (tag == 26) {
         parse_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->function().data(), this->function().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "function");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_line;
        break;
      }

      // required int32 line = 4;
      case 4: {
        if (tag == 32) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_what_str;
        break;
      }

      // required string what_str = 5;
      case 5: {
        if (tag == 42) {
         parse_what_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_what_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->what_str().data(), this->what_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "what_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_stringified_code;
        break;
      }

      // required string stringified_code = 6;
      case 6: {
        if (tag == 50) {
         parse_stringified_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringified_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stringified_code().data(), this->stringified_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stringified_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_strings_namespace;
        break;
      }

      // required string strings_namespace = 7;
      case 7: {
        if (tag == 58) {
         parse_strings_namespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strings_namespace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strings_namespace().data(), this->strings_namespace().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strings_namespace");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.QueryResult.Warning)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.QueryResult.Warning)
  return false;
#undef DO_
}

void QueryResult_Warning::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.QueryResult.Warning)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required string file = 2;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file(), output);
  }

  // required string function = 3;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->function(), output);
  }

  // required int32 line = 4;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->line(), output);
  }

  // required string what_str = 5;
  if (has_what_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->what_str().data(), this->what_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "what_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->what_str(), output);
  }

  // required string stringified_code = 6;
  if (has_stringified_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stringified_code().data(), this->stringified_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stringified_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->stringified_code(), output);
  }

  // required string strings_namespace = 7;
  if (has_strings_namespace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strings_namespace().data(), this->strings_namespace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strings_namespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->strings_namespace(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.QueryResult.Warning)
}

::google::protobuf::uint8* QueryResult_Warning::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.QueryResult.Warning)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required string file = 2;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file(), target);
  }

  // required string function = 3;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->function(), target);
  }

  // required int32 line = 4;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->line(), target);
  }

  // required string what_str = 5;
  if (has_what_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->what_str().data(), this->what_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "what_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->what_str(), target);
  }

  // required string stringified_code = 6;
  if (has_stringified_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stringified_code().data(), this->stringified_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stringified_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->stringified_code(), target);
  }

  // required string strings_namespace = 7;
  if (has_strings_namespace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strings_namespace().data(), this->strings_namespace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strings_namespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->strings_namespace(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.QueryResult.Warning)
  return target;
}

int QueryResult_Warning::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required string file = 2;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }

    // required string function = 3;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->function());
    }

    // required int32 line = 4;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line());
    }

    // required string what_str = 5;
    if (has_what_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->what_str());
    }

    // required string stringified_code = 6;
    if (has_stringified_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringified_code());
    }

    // required string strings_namespace = 7;
    if (has_strings_namespace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strings_namespace());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult_Warning::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult_Warning* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult_Warning*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult_Warning::MergeFrom(const QueryResult_Warning& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
    if (from.has_what_str()) {
      set_what_str(from.what_str());
    }
    if (from.has_stringified_code()) {
      set_stringified_code(from.stringified_code());
    }
    if (from.has_strings_namespace()) {
      set_strings_namespace(from.strings_namespace());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult_Warning::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult_Warning::CopyFrom(const QueryResult_Warning& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult_Warning::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void QueryResult_Warning::Swap(QueryResult_Warning* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(file_, other->file_);
    std::swap(function_, other->function_);
    std::swap(line_, other->line_);
    std::swap(what_str_, other->what_str_);
    std::swap(stringified_code_, other->stringified_code_);
    std::swap(strings_namespace_, other->strings_namespace_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult_Warning::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_Warning_descriptor_;
  metadata.reflection = QueryResult_Warning_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int QueryResult::kArrayNameFieldNumber;
const int QueryResult::kAttributesFieldNumber;
const int QueryResult::kDimensionsFieldNumber;
const int QueryResult::kExplainPhysicalFieldNumber;
const int QueryResult::kExecutionTimeFieldNumber;
const int QueryResult::kSelectiveFieldNumber;
const int QueryResult::kExplainLogicalFieldNumber;
const int QueryResult::kWarningsFieldNumber;
const int QueryResult::kPluginsFieldNumber;
const int QueryResult::kExclusiveArrayAccessFieldNumber;
const int QueryResult::kAutoCommitFieldNumber;
#endif  // !_MSC_VER

QueryResult::QueryResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.QueryResult)
}

void QueryResult::InitAsDefaultInstance() {
}

QueryResult::QueryResult(const QueryResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.QueryResult)
}

void QueryResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  array_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explain_physical_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  execution_time_ = GOOGLE_ULONGLONG(0);
  selective_ = false;
  explain_logical_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exclusive_array_access_ = false;
  auto_commit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResult::~QueryResult() {
  // @@protoc_insertion_point(destructor:scidb_msg.QueryResult)
  SharedDtor();
}

void QueryResult::SharedDtor() {
  if (array_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete array_name_;
  }
  if (explain_physical_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete explain_physical_;
  }
  if (explain_logical_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete explain_logical_;
  }
  if (this != default_instance_) {
  }
}

void QueryResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResult_descriptor_;
}

const QueryResult& QueryResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

QueryResult* QueryResult::default_instance_ = NULL;

QueryResult* QueryResult::New() const {
  return new QueryResult;
}

void QueryResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 121) {
    if (has_array_name()) {
      if (array_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        array_name_->clear();
      }
    }
    if (has_explain_physical()) {
      if (explain_physical_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        explain_physical_->clear();
      }
    }
    execution_time_ = GOOGLE_ULONGLONG(0);
    selective_ = false;
    if (has_explain_logical()) {
      if (explain_logical_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        explain_logical_->clear();
      }
    }
  }
  ZR_(exclusive_array_access_, auto_commit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  attributes_.Clear();
  dimensions_.Clear();
  warnings_.Clear();
  plugins_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.QueryResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string array_name = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_array_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->array_name().data(), this->array_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "array_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attributes;
        break;
      }

      // repeated .scidb_msg.QueryResult.AttributeDesc attributes = 3;
      case 3: {
        if (tag == 26) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attributes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attributes;
        if (input->ExpectTag(34)) goto parse_dimensions;
        break;
      }

      // repeated .scidb_msg.QueryResult.DimensionDesc dimensions = 4;
      case 4: {
        if (tag == 34) {
         parse_dimensions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dimensions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dimensions;
        if (input->ExpectTag(42)) goto parse_explain_physical;
        break;
      }

      // optional string explain_physical = 5;
      case 5: {
        if (tag == 42) {
         parse_explain_physical:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_explain_physical()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->explain_physical().data(), this->explain_physical().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "explain_physical");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_execution_time;
        break;
      }

      // optional uint64 execution_time = 6;
      case 6: {
        if (tag == 48) {
         parse_execution_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &execution_time_)));
          set_has_execution_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_selective;
        break;
      }

      // optional bool selective = 7;
      case 7: {
        if (tag == 56) {
         parse_selective:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selective_)));
          set_has_selective();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_explain_logical;
        break;
      }

      // optional string explain_logical = 8;
      case 8: {
        if (tag == 66) {
         parse_explain_logical:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_explain_logical()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->explain_logical().data(), this->explain_logical().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "explain_logical");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_warnings;
        break;
      }

      // repeated .scidb_msg.QueryResult.Warning warnings = 9;
      case 9: {
        if (tag == 74) {
         parse_warnings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_warnings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_warnings;
        if (input->ExpectTag(82)) goto parse_plugins;
        break;
      }

      // repeated string plugins = 10;
      case 10: {
        if (tag == 82) {
         parse_plugins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_plugins()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->plugins(this->plugins_size() - 1).data(),
            this->plugins(this->plugins_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "plugins");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_plugins;
        if (input->ExpectTag(88)) goto parse_exclusive_array_access;
        break;
      }

      // optional bool exclusive_array_access = 11;
      case 11: {
        if (tag == 88) {
         parse_exclusive_array_access:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exclusive_array_access_)));
          set_has_exclusive_array_access();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_auto_commit;
        break;
      }

      // optional bool auto_commit = 12;
      case 12: {
        if (tag == 96) {
         parse_auto_commit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_commit_)));
          set_has_auto_commit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.QueryResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.QueryResult)
  return false;
#undef DO_
}

void QueryResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.QueryResult)
  // optional string array_name = 2;
  if (has_array_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->array_name().data(), this->array_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "array_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->array_name(), output);
  }

  // repeated .scidb_msg.QueryResult.AttributeDesc attributes = 3;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attributes(i), output);
  }

  // repeated .scidb_msg.QueryResult.DimensionDesc dimensions = 4;
  for (int i = 0; i < this->dimensions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dimensions(i), output);
  }

  // optional string explain_physical = 5;
  if (has_explain_physical()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->explain_physical().data(), this->explain_physical().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "explain_physical");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->explain_physical(), output);
  }

  // optional uint64 execution_time = 6;
  if (has_execution_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->execution_time(), output);
  }

  // optional bool selective = 7;
  if (has_selective()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->selective(), output);
  }

  // optional string explain_logical = 8;
  if (has_explain_logical()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->explain_logical().data(), this->explain_logical().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "explain_logical");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->explain_logical(), output);
  }

  // repeated .scidb_msg.QueryResult.Warning warnings = 9;
  for (int i = 0; i < this->warnings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->warnings(i), output);
  }

  // repeated string plugins = 10;
  for (int i = 0; i < this->plugins_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->plugins(i).data(), this->plugins(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "plugins");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->plugins(i), output);
  }

  // optional bool exclusive_array_access = 11;
  if (has_exclusive_array_access()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->exclusive_array_access(), output);
  }

  // optional bool auto_commit = 12;
  if (has_auto_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->auto_commit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.QueryResult)
}

::google::protobuf::uint8* QueryResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.QueryResult)
  // optional string array_name = 2;
  if (has_array_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->array_name().data(), this->array_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "array_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->array_name(), target);
  }

  // repeated .scidb_msg.QueryResult.AttributeDesc attributes = 3;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attributes(i), target);
  }

  // repeated .scidb_msg.QueryResult.DimensionDesc dimensions = 4;
  for (int i = 0; i < this->dimensions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dimensions(i), target);
  }

  // optional string explain_physical = 5;
  if (has_explain_physical()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->explain_physical().data(), this->explain_physical().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "explain_physical");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->explain_physical(), target);
  }

  // optional uint64 execution_time = 6;
  if (has_execution_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->execution_time(), target);
  }

  // optional bool selective = 7;
  if (has_selective()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->selective(), target);
  }

  // optional string explain_logical = 8;
  if (has_explain_logical()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->explain_logical().data(), this->explain_logical().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "explain_logical");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->explain_logical(), target);
  }

  // repeated .scidb_msg.QueryResult.Warning warnings = 9;
  for (int i = 0; i < this->warnings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->warnings(i), target);
  }

  // repeated string plugins = 10;
  for (int i = 0; i < this->plugins_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plugins(i).data(), this->plugins(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "plugins");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->plugins(i), target);
  }

  // optional bool exclusive_array_access = 11;
  if (has_exclusive_array_access()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->exclusive_array_access(), target);
  }

  // optional bool auto_commit = 12;
  if (has_auto_commit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->auto_commit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.QueryResult)
  return target;
}

int QueryResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string array_name = 2;
    if (has_array_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->array_name());
    }

    // optional string explain_physical = 5;
    if (has_explain_physical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->explain_physical());
    }

    // optional uint64 execution_time = 6;
    if (has_execution_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->execution_time());
    }

    // optional bool selective = 7;
    if (has_selective()) {
      total_size += 1 + 1;
    }

    // optional string explain_logical = 8;
    if (has_explain_logical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->explain_logical());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional bool exclusive_array_access = 11;
    if (has_exclusive_array_access()) {
      total_size += 1 + 1;
    }

    // optional bool auto_commit = 12;
    if (has_auto_commit()) {
      total_size += 1 + 1;
    }

  }
  // repeated .scidb_msg.QueryResult.AttributeDesc attributes = 3;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }

  // repeated .scidb_msg.QueryResult.DimensionDesc dimensions = 4;
  total_size += 1 * this->dimensions_size();
  for (int i = 0; i < this->dimensions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dimensions(i));
  }

  // repeated .scidb_msg.QueryResult.Warning warnings = 9;
  total_size += 1 * this->warnings_size();
  for (int i = 0; i < this->warnings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->warnings(i));
  }

  // repeated string plugins = 10;
  total_size += 1 * this->plugins_size();
  for (int i = 0; i < this->plugins_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->plugins(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResult::MergeFrom(const QueryResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributes_.MergeFrom(from.attributes_);
  dimensions_.MergeFrom(from.dimensions_);
  warnings_.MergeFrom(from.warnings_);
  plugins_.MergeFrom(from.plugins_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_array_name()) {
      set_array_name(from.array_name());
    }
    if (from.has_explain_physical()) {
      set_explain_physical(from.explain_physical());
    }
    if (from.has_execution_time()) {
      set_execution_time(from.execution_time());
    }
    if (from.has_selective()) {
      set_selective(from.selective());
    }
    if (from.has_explain_logical()) {
      set_explain_logical(from.explain_logical());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_exclusive_array_access()) {
      set_exclusive_array_access(from.exclusive_array_access());
    }
    if (from.has_auto_commit()) {
      set_auto_commit(from.auto_commit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResult::CopyFrom(const QueryResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResult::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->attributes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->dimensions())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->warnings())) return false;
  return true;
}

void QueryResult::Swap(QueryResult* other) {
  if (other != this) {
    std::swap(array_name_, other->array_name_);
    attributes_.Swap(&other->attributes_);
    dimensions_.Swap(&other->dimensions_);
    std::swap(explain_physical_, other->explain_physical_);
    std::swap(execution_time_, other->execution_time_);
    std::swap(selective_, other->selective_);
    std::swap(explain_logical_, other->explain_logical_);
    warnings_.Swap(&other->warnings_);
    plugins_.Swap(&other->plugins_);
    std::swap(exclusive_array_access_, other->exclusive_array_access_);
    std::swap(auto_commit_, other->auto_commit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResult_descriptor_;
  metadata.reflection = QueryResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PhysicalPlan::kPhysicalPlanFieldNumber;
const int PhysicalPlan::kClusterUuidFieldNumber;
const int PhysicalPlan::kSessionInfoFieldNumber;
const int PhysicalPlan::kQueryFieldNumber;
#endif  // !_MSC_VER

PhysicalPlan::PhysicalPlan()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.PhysicalPlan)
}

void PhysicalPlan::InitAsDefaultInstance() {
  session_info_ = const_cast< ::scidb_msg::SessionInfo*>(&::scidb_msg::SessionInfo::default_instance());
  query_ = const_cast< ::scidb_msg::Query*>(&::scidb_msg::Query::default_instance());
}

PhysicalPlan::PhysicalPlan(const PhysicalPlan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.PhysicalPlan)
}

void PhysicalPlan::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  physical_plan_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_info_ = NULL;
  query_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhysicalPlan::~PhysicalPlan() {
  // @@protoc_insertion_point(destructor:scidb_msg.PhysicalPlan)
  SharedDtor();
}

void PhysicalPlan::SharedDtor() {
  if (physical_plan_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete physical_plan_;
  }
  if (cluster_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cluster_uuid_;
  }
  if (this != default_instance_) {
    delete session_info_;
    delete query_;
  }
}

void PhysicalPlan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhysicalPlan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhysicalPlan_descriptor_;
}

const PhysicalPlan& PhysicalPlan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

PhysicalPlan* PhysicalPlan::default_instance_ = NULL;

PhysicalPlan* PhysicalPlan::New() const {
  return new PhysicalPlan;
}

void PhysicalPlan::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_physical_plan()) {
      if (physical_plan_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        physical_plan_->clear();
      }
    }
    if (has_cluster_uuid()) {
      if (cluster_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cluster_uuid_->clear();
      }
    }
    if (has_session_info()) {
      if (session_info_ != NULL) session_info_->::scidb_msg::SessionInfo::Clear();
    }
    if (has_query()) {
      if (query_ != NULL) query_->::scidb_msg::Query::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PhysicalPlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.PhysicalPlan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string physical_plan = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_physical_plan()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->physical_plan().data(), this->physical_plan().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "physical_plan");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cluster_uuid;
        break;
      }

      // required string cluster_uuid = 6;
      case 6: {
        if (tag == 50) {
         parse_cluster_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cluster_uuid().data(), this->cluster_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cluster_uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_session_info;
        break;
      }

      // optional .scidb_msg.SessionInfo session_info = 7;
      case 7: {
        if (tag == 58) {
         parse_session_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_query;
        break;
      }

      // optional .scidb_msg.Query query = 8;
      case 8: {
        if (tag == 66) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.PhysicalPlan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.PhysicalPlan)
  return false;
#undef DO_
}

void PhysicalPlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.PhysicalPlan)
  // required string physical_plan = 2;
  if (has_physical_plan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->physical_plan().data(), this->physical_plan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "physical_plan");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->physical_plan(), output);
  }

  // required string cluster_uuid = 6;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->cluster_uuid(), output);
  }

  // optional .scidb_msg.SessionInfo session_info = 7;
  if (has_session_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->session_info(), output);
  }

  // optional .scidb_msg.Query query = 8;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->query(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.PhysicalPlan)
}

::google::protobuf::uint8* PhysicalPlan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.PhysicalPlan)
  // required string physical_plan = 2;
  if (has_physical_plan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->physical_plan().data(), this->physical_plan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "physical_plan");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->physical_plan(), target);
  }

  // required string cluster_uuid = 6;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cluster_uuid(), target);
  }

  // optional .scidb_msg.SessionInfo session_info = 7;
  if (has_session_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->session_info(), target);
  }

  // optional .scidb_msg.Query query = 8;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->query(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.PhysicalPlan)
  return target;
}

int PhysicalPlan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string physical_plan = 2;
    if (has_physical_plan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->physical_plan());
    }

    // required string cluster_uuid = 6;
    if (has_cluster_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_uuid());
    }

    // optional .scidb_msg.SessionInfo session_info = 7;
    if (has_session_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_info());
    }

    // optional .scidb_msg.Query query = 8;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhysicalPlan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PhysicalPlan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PhysicalPlan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PhysicalPlan::MergeFrom(const PhysicalPlan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_physical_plan()) {
      set_physical_plan(from.physical_plan());
    }
    if (from.has_cluster_uuid()) {
      set_cluster_uuid(from.cluster_uuid());
    }
    if (from.has_session_info()) {
      mutable_session_info()->::scidb_msg::SessionInfo::MergeFrom(from.session_info());
    }
    if (from.has_query()) {
      mutable_query()->::scidb_msg::Query::MergeFrom(from.query());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PhysicalPlan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhysicalPlan::CopyFrom(const PhysicalPlan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysicalPlan::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_query()) {
    if (!this->query().IsInitialized()) return false;
  }
  return true;
}

void PhysicalPlan::Swap(PhysicalPlan* other) {
  if (other != this) {
    std::swap(physical_plan_, other->physical_plan_);
    std::swap(cluster_uuid_, other->cluster_uuid_);
    std::swap(session_info_, other->session_info_);
    std::swap(query_, other->query_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PhysicalPlan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhysicalPlan_descriptor_;
  metadata.reflection = PhysicalPlan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Error_ParsingContext::kQueryStringFieldNumber;
const int Error_ParsingContext::kLineStartFieldNumber;
const int Error_ParsingContext::kColStartFieldNumber;
const int Error_ParsingContext::kLineEndFieldNumber;
const int Error_ParsingContext::kColEndFieldNumber;
#endif  // !_MSC_VER

Error_ParsingContext::Error_ParsingContext()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.Error.ParsingContext)
}

void Error_ParsingContext::InitAsDefaultInstance() {
}

Error_ParsingContext::Error_ParsingContext(const Error_ParsingContext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.Error.ParsingContext)
}

void Error_ParsingContext::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  query_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_start_ = 0u;
  col_start_ = 0u;
  line_end_ = 0u;
  col_end_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error_ParsingContext::~Error_ParsingContext() {
  // @@protoc_insertion_point(destructor:scidb_msg.Error.ParsingContext)
  SharedDtor();
}

void Error_ParsingContext::SharedDtor() {
  if (query_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete query_string_;
  }
  if (this != default_instance_) {
  }
}

void Error_ParsingContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error_ParsingContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_ParsingContext_descriptor_;
}

const Error_ParsingContext& Error_ParsingContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

Error_ParsingContext* Error_ParsingContext::default_instance_ = NULL;

Error_ParsingContext* Error_ParsingContext::New() const {
  return new Error_ParsingContext;
}

void Error_ParsingContext::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Error_ParsingContext*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(line_start_, col_end_);
    if (has_query_string()) {
      if (query_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        query_string_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error_ParsingContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.Error.ParsingContext)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string query_string = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_string().data(), this->query_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "query_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_line_start;
        break;
      }

      // required uint32 line_start = 2;
      case 2: {
        if (tag == 16) {
         parse_line_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_start_)));
          set_has_line_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_col_start;
        break;
      }

      // required uint32 col_start = 3;
      case 3: {
        if (tag == 24) {
         parse_col_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &col_start_)));
          set_has_col_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_line_end;
        break;
      }

      // required uint32 line_end = 4;
      case 4: {
        if (tag == 32) {
         parse_line_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_end_)));
          set_has_line_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_col_end;
        break;
      }

      // required uint32 col_end = 5;
      case 5: {
        if (tag == 40) {
         parse_col_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &col_end_)));
          set_has_col_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.Error.ParsingContext)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.Error.ParsingContext)
  return false;
#undef DO_
}

void Error_ParsingContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.Error.ParsingContext)
  // required string query_string = 1;
  if (has_query_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_string().data(), this->query_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "query_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->query_string(), output);
  }

  // required uint32 line_start = 2;
  if (has_line_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->line_start(), output);
  }

  // required uint32 col_start = 3;
  if (has_col_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->col_start(), output);
  }

  // required uint32 line_end = 4;
  if (has_line_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->line_end(), output);
  }

  // required uint32 col_end = 5;
  if (has_col_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->col_end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.Error.ParsingContext)
}

::google::protobuf::uint8* Error_ParsingContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.Error.ParsingContext)
  // required string query_string = 1;
  if (has_query_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_string().data(), this->query_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "query_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query_string(), target);
  }

  // required uint32 line_start = 2;
  if (has_line_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->line_start(), target);
  }

  // required uint32 col_start = 3;
  if (has_col_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->col_start(), target);
  }

  // required uint32 line_end = 4;
  if (has_line_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->line_end(), target);
  }

  // required uint32 col_end = 5;
  if (has_col_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->col_end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.Error.ParsingContext)
  return target;
}

int Error_ParsingContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string query_string = 1;
    if (has_query_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_string());
    }

    // required uint32 line_start = 2;
    if (has_line_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line_start());
    }

    // required uint32 col_start = 3;
    if (has_col_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->col_start());
    }

    // required uint32 line_end = 4;
    if (has_line_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line_end());
    }

    // required uint32 col_end = 5;
    if (has_col_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->col_end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error_ParsingContext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error_ParsingContext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error_ParsingContext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error_ParsingContext::MergeFrom(const Error_ParsingContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query_string()) {
      set_query_string(from.query_string());
    }
    if (from.has_line_start()) {
      set_line_start(from.line_start());
    }
    if (from.has_col_start()) {
      set_col_start(from.col_start());
    }
    if (from.has_line_end()) {
      set_line_end(from.line_end());
    }
    if (from.has_col_end()) {
      set_col_end(from.col_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error_ParsingContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error_ParsingContext::CopyFrom(const Error_ParsingContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error_ParsingContext::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Error_ParsingContext::Swap(Error_ParsingContext* other) {
  if (other != this) {
    std::swap(query_string_, other->query_string_);
    std::swap(line_start_, other->line_start_);
    std::swap(col_start_, other->col_start_);
    std::swap(line_end_, other->line_end_);
    std::swap(col_end_, other->col_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error_ParsingContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_ParsingContext_descriptor_;
  metadata.reflection = Error_ParsingContext_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Error::kTypeFieldNumber;
const int Error::kFileFieldNumber;
const int Error::kFunctionFieldNumber;
const int Error::kLineFieldNumber;
const int Error::kWhatStrFieldNumber;
const int Error::kErrorsNamespaceFieldNumber;
const int Error::kShortErrorCodeFieldNumber;
const int Error::kLongErrorCodeFieldNumber;
const int Error::kStringifiedShortErrorCodeFieldNumber;
const int Error::kStringifiedLongErrorCodeFieldNumber;
const int Error::kParsingContextFieldNumber;
const int Error::kClusterUuidFieldNumber;
const int Error::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.Error)
}

void Error::InitAsDefaultInstance() {
  parsing_context_ = const_cast< ::scidb_msg::Error_ParsingContext*>(&::scidb_msg::Error_ParsingContext::default_instance());
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.Error)
}

void Error::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_ = 0;
  what_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errors_namespace_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_error_code_ = 0;
  long_error_code_ = 0;
  stringified_short_error_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stringified_long_error_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parsing_context_ = NULL;
  cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:scidb_msg.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_;
  }
  if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete function_;
  }
  if (what_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete what_str_;
  }
  if (errors_namespace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errors_namespace_;
  }
  if (stringified_short_error_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stringified_short_error_code_;
  }
  if (stringified_long_error_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete stringified_long_error_code_;
  }
  if (cluster_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cluster_uuid_;
  }
  if (this != default_instance_) {
    delete parsing_context_;
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Error*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, line_);
    ZR_(short_error_code_, long_error_code_);
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_->clear();
      }
    }
    if (has_function()) {
      if (function_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        function_->clear();
      }
    }
    if (has_what_str()) {
      if (what_str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        what_str_->clear();
      }
    }
    if (has_errors_namespace()) {
      if (errors_namespace_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errors_namespace_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_stringified_short_error_code()) {
      if (stringified_short_error_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stringified_short_error_code_->clear();
      }
    }
    if (has_stringified_long_error_code()) {
      if (stringified_long_error_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        stringified_long_error_code_->clear();
      }
    }
    if (has_parsing_context()) {
      if (parsing_context_ != NULL) parsing_context_->::scidb_msg::Error_ParsingContext::Clear();
    }
    if (has_cluster_uuid()) {
      if (cluster_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cluster_uuid_->clear();
      }
    }
    instance_id_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file;
        break;
      }

      // optional string file = 2;
      case 2: {
        if (tag == 18) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_function;
        break;
      }

      // optional string function = 3;
      case 3: {
        if (tag == 26) {
         parse_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->function().data(), this->function().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "function");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_line;
        break;
      }

      // optional int32 line = 4;
      case 4: {
        if (tag == 32) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_what_str;
        break;
      }

      // optional string what_str = 5;
      case 5: {
        if (tag == 42) {
         parse_what_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_what_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->what_str().data(), this->what_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "what_str");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_errors_namespace;
        break;
      }

      // required string errors_namespace = 6;
      case 6: {
        if (tag == 50) {
         parse_errors_namespace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errors_namespace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errors_namespace().data(), this->errors_namespace().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errors_namespace");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_short_error_code;
        break;
      }

      // required int32 short_error_code = 7;
      case 7: {
        if (tag == 56) {
         parse_short_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &short_error_code_)));
          set_has_short_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_long_error_code;
        break;
      }

      // required int32 long_error_code = 8;
      case 8: {
        if (tag == 64) {
         parse_long_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &long_error_code_)));
          set_has_long_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_stringified_short_error_code;
        break;
      }

      // optional string stringified_short_error_code = 9;
      case 9: {
        if (tag == 74) {
         parse_stringified_short_error_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringified_short_error_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stringified_short_error_code().data(), this->stringified_short_error_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stringified_short_error_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_stringified_long_error_code;
        break;
      }

      // optional string stringified_long_error_code = 10;
      case 10: {
        if (tag == 82) {
         parse_stringified_long_error_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringified_long_error_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stringified_long_error_code().data(), this->stringified_long_error_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "stringified_long_error_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_parsing_context;
        break;
      }

      // optional .scidb_msg.Error.ParsingContext parsing_context = 11;
      case 11: {
        if (tag == 90) {
         parse_parsing_context:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parsing_context()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_cluster_uuid;
        break;
      }

      // optional string cluster_uuid = 12;
      case 12: {
        if (tag == 98) {
         parse_cluster_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cluster_uuid().data(), this->cluster_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cluster_uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_instance_id;
        break;
      }

      // optional uint64 instance_id = 13;
      case 13: {
        if (tag == 104) {
         parse_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.Error)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string file = 2;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file(), output);
  }

  // optional string function = 3;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->function(), output);
  }

  // optional int32 line = 4;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->line(), output);
  }

  // optional string what_str = 5;
  if (has_what_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->what_str().data(), this->what_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "what_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->what_str(), output);
  }

  // required string errors_namespace = 6;
  if (has_errors_namespace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errors_namespace().data(), this->errors_namespace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errors_namespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->errors_namespace(), output);
  }

  // required int32 short_error_code = 7;
  if (has_short_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->short_error_code(), output);
  }

  // required int32 long_error_code = 8;
  if (has_long_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->long_error_code(), output);
  }

  // optional string stringified_short_error_code = 9;
  if (has_stringified_short_error_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stringified_short_error_code().data(), this->stringified_short_error_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stringified_short_error_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->stringified_short_error_code(), output);
  }

  // optional string stringified_long_error_code = 10;
  if (has_stringified_long_error_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stringified_long_error_code().data(), this->stringified_long_error_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stringified_long_error_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->stringified_long_error_code(), output);
  }

  // optional .scidb_msg.Error.ParsingContext parsing_context = 11;
  if (has_parsing_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->parsing_context(), output);
  }

  // optional string cluster_uuid = 12;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->cluster_uuid(), output);
  }

  // optional uint64 instance_id = 13;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->instance_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.Error)
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.Error)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string file = 2;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file(), target);
  }

  // optional string function = 3;
  if (has_function()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function().data(), this->function().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->function(), target);
  }

  // optional int32 line = 4;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->line(), target);
  }

  // optional string what_str = 5;
  if (has_what_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->what_str().data(), this->what_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "what_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->what_str(), target);
  }

  // required string errors_namespace = 6;
  if (has_errors_namespace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errors_namespace().data(), this->errors_namespace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errors_namespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->errors_namespace(), target);
  }

  // required int32 short_error_code = 7;
  if (has_short_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->short_error_code(), target);
  }

  // required int32 long_error_code = 8;
  if (has_long_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->long_error_code(), target);
  }

  // optional string stringified_short_error_code = 9;
  if (has_stringified_short_error_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stringified_short_error_code().data(), this->stringified_short_error_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stringified_short_error_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->stringified_short_error_code(), target);
  }

  // optional string stringified_long_error_code = 10;
  if (has_stringified_long_error_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stringified_long_error_code().data(), this->stringified_long_error_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "stringified_long_error_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->stringified_long_error_code(), target);
  }

  // optional .scidb_msg.Error.ParsingContext parsing_context = 11;
  if (has_parsing_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->parsing_context(), target);
  }

  // optional string cluster_uuid = 12;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->cluster_uuid(), target);
  }

  // optional uint64 instance_id = 13;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->instance_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.Error)
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string file = 2;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }

    // optional string function = 3;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->function());
    }

    // optional int32 line = 4;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line());
    }

    // optional string what_str = 5;
    if (has_what_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->what_str());
    }

    // required string errors_namespace = 6;
    if (has_errors_namespace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errors_namespace());
    }

    // required int32 short_error_code = 7;
    if (has_short_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->short_error_code());
    }

    // required int32 long_error_code = 8;
    if (has_long_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->long_error_code());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string stringified_short_error_code = 9;
    if (has_stringified_short_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringified_short_error_code());
    }

    // optional string stringified_long_error_code = 10;
    if (has_stringified_long_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringified_long_error_code());
    }

    // optional .scidb_msg.Error.ParsingContext parsing_context = 11;
    if (has_parsing_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parsing_context());
    }

    // optional string cluster_uuid = 12;
    if (has_cluster_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_uuid());
    }

    // optional uint64 instance_id = 13;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instance_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_function()) {
      set_function(from.function());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
    if (from.has_what_str()) {
      set_what_str(from.what_str());
    }
    if (from.has_errors_namespace()) {
      set_errors_namespace(from.errors_namespace());
    }
    if (from.has_short_error_code()) {
      set_short_error_code(from.short_error_code());
    }
    if (from.has_long_error_code()) {
      set_long_error_code(from.long_error_code());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stringified_short_error_code()) {
      set_stringified_short_error_code(from.stringified_short_error_code());
    }
    if (from.has_stringified_long_error_code()) {
      set_stringified_long_error_code(from.stringified_long_error_code());
    }
    if (from.has_parsing_context()) {
      mutable_parsing_context()->::scidb_msg::Error_ParsingContext::MergeFrom(from.parsing_context());
    }
    if (from.has_cluster_uuid()) {
      set_cluster_uuid(from.cluster_uuid());
    }
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000e1) != 0x000000e1) return false;

  if (has_parsing_context()) {
    if (!this->parsing_context().IsInitialized()) return false;
  }
  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(file_, other->file_);
    std::swap(function_, other->function_);
    std::swap(line_, other->line_);
    std::swap(what_str_, other->what_str_);
    std::swap(errors_namespace_, other->errors_namespace_);
    std::swap(short_error_code_, other->short_error_code_);
    std::swap(long_error_code_, other->long_error_code_);
    std::swap(stringified_short_error_code_, other->stringified_short_error_code_);
    std::swap(stringified_long_error_code_, other->stringified_long_error_code_);
    std::swap(parsing_context_, other->parsing_context_);
    std::swap(cluster_uuid_, other->cluster_uuid_);
    std::swap(instance_id_, other->instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DummyQuery::kPayloadIdFieldNumber;
const int DummyQuery::kClusterUuidFieldNumber;
#endif  // !_MSC_VER

DummyQuery::DummyQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.DummyQuery)
}

void DummyQuery::InitAsDefaultInstance() {
}

DummyQuery::DummyQuery(const DummyQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.DummyQuery)
}

void DummyQuery::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  payload_id_ = GOOGLE_ULONGLONG(0);
  cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DummyQuery::~DummyQuery() {
  // @@protoc_insertion_point(destructor:scidb_msg.DummyQuery)
  SharedDtor();
}

void DummyQuery::SharedDtor() {
  if (cluster_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cluster_uuid_;
  }
  if (this != default_instance_) {
  }
}

void DummyQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DummyQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DummyQuery_descriptor_;
}

const DummyQuery& DummyQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

DummyQuery* DummyQuery::default_instance_ = NULL;

DummyQuery* DummyQuery::New() const {
  return new DummyQuery;
}

void DummyQuery::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    payload_id_ = GOOGLE_ULONGLONG(0);
    if (has_cluster_uuid()) {
      if (cluster_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cluster_uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DummyQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.DummyQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 payload_id = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &payload_id_)));
          set_has_payload_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cluster_uuid;
        break;
      }

      // optional string cluster_uuid = 3;
      case 3: {
        if (tag == 26) {
         parse_cluster_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cluster_uuid().data(), this->cluster_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cluster_uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.DummyQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.DummyQuery)
  return false;
#undef DO_
}

void DummyQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.DummyQuery)
  // optional uint64 payload_id = 2;
  if (has_payload_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->payload_id(), output);
  }

  // optional string cluster_uuid = 3;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cluster_uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.DummyQuery)
}

::google::protobuf::uint8* DummyQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.DummyQuery)
  // optional uint64 payload_id = 2;
  if (has_payload_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->payload_id(), target);
  }

  // optional string cluster_uuid = 3;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cluster_uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.DummyQuery)
  return target;
}

int DummyQuery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 payload_id = 2;
    if (has_payload_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->payload_id());
    }

    // optional string cluster_uuid = 3;
    if (has_cluster_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DummyQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DummyQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DummyQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DummyQuery::MergeFrom(const DummyQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payload_id()) {
      set_payload_id(from.payload_id());
    }
    if (from.has_cluster_uuid()) {
      set_cluster_uuid(from.cluster_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DummyQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DummyQuery::CopyFrom(const DummyQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DummyQuery::IsInitialized() const {

  return true;
}

void DummyQuery::Swap(DummyQuery* other) {
  if (other != this) {
    std::swap(payload_id_, other->payload_id_);
    std::swap(cluster_uuid_, other->cluster_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DummyQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DummyQuery_descriptor_;
  metadata.reflection = DummyQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourcesFileExistsRequest::kResourceRequestIdFieldNumber;
const int ResourcesFileExistsRequest::kFilePathFieldNumber;
#endif  // !_MSC_VER

ResourcesFileExistsRequest::ResourcesFileExistsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.ResourcesFileExistsRequest)
}

void ResourcesFileExistsRequest::InitAsDefaultInstance() {
}

ResourcesFileExistsRequest::ResourcesFileExistsRequest(const ResourcesFileExistsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.ResourcesFileExistsRequest)
}

void ResourcesFileExistsRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resource_request_id_ = GOOGLE_ULONGLONG(0);
  file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourcesFileExistsRequest::~ResourcesFileExistsRequest() {
  // @@protoc_insertion_point(destructor:scidb_msg.ResourcesFileExistsRequest)
  SharedDtor();
}

void ResourcesFileExistsRequest::SharedDtor() {
  if (file_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_path_;
  }
  if (this != default_instance_) {
  }
}

void ResourcesFileExistsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourcesFileExistsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourcesFileExistsRequest_descriptor_;
}

const ResourcesFileExistsRequest& ResourcesFileExistsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

ResourcesFileExistsRequest* ResourcesFileExistsRequest::default_instance_ = NULL;

ResourcesFileExistsRequest* ResourcesFileExistsRequest::New() const {
  return new ResourcesFileExistsRequest;
}

void ResourcesFileExistsRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    resource_request_id_ = GOOGLE_ULONGLONG(0);
    if (has_file_path()) {
      if (file_path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourcesFileExistsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.ResourcesFileExistsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 resource_request_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resource_request_id_)));
          set_has_resource_request_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file_path;
        break;
      }

      // required string file_path = 2;
      case 2: {
        if (tag == 18) {
         parse_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.ResourcesFileExistsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.ResourcesFileExistsRequest)
  return false;
#undef DO_
}

void ResourcesFileExistsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.ResourcesFileExistsRequest)
  // required uint64 resource_request_id = 1;
  if (has_resource_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->resource_request_id(), output);
  }

  // required string file_path = 2;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.ResourcesFileExistsRequest)
}

::google::protobuf::uint8* ResourcesFileExistsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.ResourcesFileExistsRequest)
  // required uint64 resource_request_id = 1;
  if (has_resource_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->resource_request_id(), target);
  }

  // required string file_path = 2;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.ResourcesFileExistsRequest)
  return target;
}

int ResourcesFileExistsRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 resource_request_id = 1;
    if (has_resource_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resource_request_id());
    }

    // required string file_path = 2;
    if (has_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourcesFileExistsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourcesFileExistsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourcesFileExistsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourcesFileExistsRequest::MergeFrom(const ResourcesFileExistsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resource_request_id()) {
      set_resource_request_id(from.resource_request_id());
    }
    if (from.has_file_path()) {
      set_file_path(from.file_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourcesFileExistsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourcesFileExistsRequest::CopyFrom(const ResourcesFileExistsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourcesFileExistsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ResourcesFileExistsRequest::Swap(ResourcesFileExistsRequest* other) {
  if (other != this) {
    std::swap(resource_request_id_, other->resource_request_id_);
    std::swap(file_path_, other->file_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourcesFileExistsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourcesFileExistsRequest_descriptor_;
  metadata.reflection = ResourcesFileExistsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourcesFileExistsResponse::kResourceRequestIdFieldNumber;
const int ResourcesFileExistsResponse::kExistFlagFieldNumber;
#endif  // !_MSC_VER

ResourcesFileExistsResponse::ResourcesFileExistsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.ResourcesFileExistsResponse)
}

void ResourcesFileExistsResponse::InitAsDefaultInstance() {
}

ResourcesFileExistsResponse::ResourcesFileExistsResponse(const ResourcesFileExistsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.ResourcesFileExistsResponse)
}

void ResourcesFileExistsResponse::SharedCtor() {
  _cached_size_ = 0;
  resource_request_id_ = GOOGLE_ULONGLONG(0);
  exist_flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourcesFileExistsResponse::~ResourcesFileExistsResponse() {
  // @@protoc_insertion_point(destructor:scidb_msg.ResourcesFileExistsResponse)
  SharedDtor();
}

void ResourcesFileExistsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourcesFileExistsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourcesFileExistsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourcesFileExistsResponse_descriptor_;
}

const ResourcesFileExistsResponse& ResourcesFileExistsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

ResourcesFileExistsResponse* ResourcesFileExistsResponse::default_instance_ = NULL;

ResourcesFileExistsResponse* ResourcesFileExistsResponse::New() const {
  return new ResourcesFileExistsResponse;
}

void ResourcesFileExistsResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ResourcesFileExistsResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(resource_request_id_, exist_flag_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourcesFileExistsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.ResourcesFileExistsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 resource_request_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resource_request_id_)));
          set_has_resource_request_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exist_flag;
        break;
      }

      // required bool exist_flag = 2;
      case 2: {
        if (tag == 16) {
         parse_exist_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exist_flag_)));
          set_has_exist_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.ResourcesFileExistsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.ResourcesFileExistsResponse)
  return false;
#undef DO_
}

void ResourcesFileExistsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.ResourcesFileExistsResponse)
  // required uint64 resource_request_id = 1;
  if (has_resource_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->resource_request_id(), output);
  }

  // required bool exist_flag = 2;
  if (has_exist_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->exist_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.ResourcesFileExistsResponse)
}

::google::protobuf::uint8* ResourcesFileExistsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.ResourcesFileExistsResponse)
  // required uint64 resource_request_id = 1;
  if (has_resource_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->resource_request_id(), target);
  }

  // required bool exist_flag = 2;
  if (has_exist_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->exist_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.ResourcesFileExistsResponse)
  return target;
}

int ResourcesFileExistsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 resource_request_id = 1;
    if (has_resource_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resource_request_id());
    }

    // required bool exist_flag = 2;
    if (has_exist_flag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourcesFileExistsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourcesFileExistsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourcesFileExistsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourcesFileExistsResponse::MergeFrom(const ResourcesFileExistsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resource_request_id()) {
      set_resource_request_id(from.resource_request_id());
    }
    if (from.has_exist_flag()) {
      set_exist_flag(from.exist_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourcesFileExistsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourcesFileExistsResponse::CopyFrom(const ResourcesFileExistsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourcesFileExistsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ResourcesFileExistsResponse::Swap(ResourcesFileExistsResponse* other) {
  if (other != this) {
    std::swap(resource_request_id_, other->resource_request_id_);
    std::swap(exist_flag_, other->exist_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourcesFileExistsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourcesFileExistsResponse_descriptor_;
  metadata.reflection = ResourcesFileExistsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Control_Channel::kIdFieldNumber;
const int Control_Channel::kAvailableFieldNumber;
const int Control_Channel::kLocalSnFieldNumber;
const int Control_Channel::kRemoteSnFieldNumber;
#endif  // !_MSC_VER

Control_Channel::Control_Channel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.Control.Channel)
}

void Control_Channel::InitAsDefaultInstance() {
}

Control_Channel::Control_Channel(const Control_Channel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.Control.Channel)
}

void Control_Channel::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  available_ = GOOGLE_ULONGLONG(0);
  local_sn_ = GOOGLE_ULONGLONG(0);
  remote_sn_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Control_Channel::~Control_Channel() {
  // @@protoc_insertion_point(destructor:scidb_msg.Control.Channel)
  SharedDtor();
}

void Control_Channel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Control_Channel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control_Channel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Control_Channel_descriptor_;
}

const Control_Channel& Control_Channel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

Control_Channel* Control_Channel::default_instance_ = NULL;

Control_Channel* Control_Channel::New() const {
  return new Control_Channel;
}

void Control_Channel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Control_Channel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(available_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Control_Channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.Control.Channel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_available;
        break;
      }

      // required uint64 available = 2;
      case 2: {
        if (tag == 16) {
         parse_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &available_)));
          set_has_available();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_local_sn;
        break;
      }

      // required uint64 local_sn = 3;
      case 3: {
        if (tag == 24) {
         parse_local_sn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_sn_)));
          set_has_local_sn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_remote_sn;
        break;
      }

      // required uint64 remote_sn = 4;
      case 4: {
        if (tag == 32) {
         parse_remote_sn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &remote_sn_)));
          set_has_remote_sn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.Control.Channel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.Control.Channel)
  return false;
#undef DO_
}

void Control_Channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.Control.Channel)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint64 available = 2;
  if (has_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->available(), output);
  }

  // required uint64 local_sn = 3;
  if (has_local_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->local_sn(), output);
  }

  // required uint64 remote_sn = 4;
  if (has_remote_sn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->remote_sn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.Control.Channel)
}

::google::protobuf::uint8* Control_Channel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.Control.Channel)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint64 available = 2;
  if (has_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->available(), target);
  }

  // required uint64 local_sn = 3;
  if (has_local_sn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->local_sn(), target);
  }

  // required uint64 remote_sn = 4;
  if (has_remote_sn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->remote_sn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.Control.Channel)
  return target;
}

int Control_Channel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint64 available = 2;
    if (has_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->available());
    }

    // required uint64 local_sn = 3;
    if (has_local_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->local_sn());
    }

    // required uint64 remote_sn = 4;
    if (has_remote_sn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->remote_sn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control_Channel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Control_Channel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Control_Channel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Control_Channel::MergeFrom(const Control_Channel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_available()) {
      set_available(from.available());
    }
    if (from.has_local_sn()) {
      set_local_sn(from.local_sn());
    }
    if (from.has_remote_sn()) {
      set_remote_sn(from.remote_sn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Control_Channel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control_Channel::CopyFrom(const Control_Channel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control_Channel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Control_Channel::Swap(Control_Channel* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(available_, other->available_);
    std::swap(local_sn_, other->local_sn_);
    std::swap(remote_sn_, other->remote_sn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Control_Channel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Control_Channel_descriptor_;
  metadata.reflection = Control_Channel_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Control::kLocalGenIdFieldNumber;
const int Control::kRemoteGenIdFieldNumber;
const int Control::kChannelsFieldNumber;
#endif  // !_MSC_VER

Control::Control()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.Control)
}

void Control::InitAsDefaultInstance() {
}

Control::Control(const Control& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.Control)
}

void Control::SharedCtor() {
  _cached_size_ = 0;
  local_gen_id_ = GOOGLE_ULONGLONG(0);
  remote_gen_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Control::~Control() {
  // @@protoc_insertion_point(destructor:scidb_msg.Control)
  SharedDtor();
}

void Control::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Control::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Control_descriptor_;
}

const Control& Control::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

Control* Control::default_instance_ = NULL;

Control* Control::New() const {
  return new Control;
}

void Control::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Control*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(local_gen_id_, remote_gen_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  channels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.Control)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 local_gen_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &local_gen_id_)));
          set_has_local_gen_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_remote_gen_id;
        break;
      }

      // required uint64 remote_gen_id = 2;
      case 2: {
        if (tag == 16) {
         parse_remote_gen_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &remote_gen_id_)));
          set_has_remote_gen_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channels;
        break;
      }

      // repeated .scidb_msg.Control.Channel channels = 3;
      case 3: {
        if (tag == 26) {
         parse_channels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_channels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.Control)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.Control)
  return false;
#undef DO_
}

void Control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.Control)
  // required uint64 local_gen_id = 1;
  if (has_local_gen_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->local_gen_id(), output);
  }

  // required uint64 remote_gen_id = 2;
  if (has_remote_gen_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->remote_gen_id(), output);
  }

  // repeated .scidb_msg.Control.Channel channels = 3;
  for (int i = 0; i < this->channels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->channels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.Control)
}

::google::protobuf::uint8* Control::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.Control)
  // required uint64 local_gen_id = 1;
  if (has_local_gen_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->local_gen_id(), target);
  }

  // required uint64 remote_gen_id = 2;
  if (has_remote_gen_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->remote_gen_id(), target);
  }

  // repeated .scidb_msg.Control.Channel channels = 3;
  for (int i = 0; i < this->channels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->channels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.Control)
  return target;
}

int Control::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 local_gen_id = 1;
    if (has_local_gen_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->local_gen_id());
    }

    // required uint64 remote_gen_id = 2;
    if (has_remote_gen_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->remote_gen_id());
    }

  }
  // repeated .scidb_msg.Control.Channel channels = 3;
  total_size += 1 * this->channels_size();
  for (int i = 0; i < this->channels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->channels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Control* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Control*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Control::MergeFrom(const Control& from) {
  GOOGLE_CHECK_NE(&from, this);
  channels_.MergeFrom(from.channels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_local_gen_id()) {
      set_local_gen_id(from.local_gen_id());
    }
    if (from.has_remote_gen_id()) {
      set_remote_gen_id(from.remote_gen_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Control::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control::CopyFrom(const Control& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->channels())) return false;
  return true;
}

void Control::Swap(Control* other) {
  if (other != this) {
    std::swap(local_gen_id_, other->local_gen_id_);
    std::swap(remote_gen_id_, other->remote_gen_id_);
    channels_.Swap(&other->channels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Control::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Control_descriptor_;
  metadata.reflection = Control_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MpiSlaveHandshake::kClusterUuidFieldNumber;
const int MpiSlaveHandshake::kInstanceIdFieldNumber;
const int MpiSlaveHandshake::kLaunchIdFieldNumber;
const int MpiSlaveHandshake::kRankFieldNumber;
const int MpiSlaveHandshake::kPidFieldNumber;
const int MpiSlaveHandshake::kPpidFieldNumber;
#endif  // !_MSC_VER

MpiSlaveHandshake::MpiSlaveHandshake()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.MpiSlaveHandshake)
}

void MpiSlaveHandshake::InitAsDefaultInstance() {
}

MpiSlaveHandshake::MpiSlaveHandshake(const MpiSlaveHandshake& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.MpiSlaveHandshake)
}

void MpiSlaveHandshake::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instance_id_ = GOOGLE_ULONGLONG(0);
  launch_id_ = GOOGLE_ULONGLONG(0);
  rank_ = GOOGLE_ULONGLONG(0);
  pid_ = 0;
  ppid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MpiSlaveHandshake::~MpiSlaveHandshake() {
  // @@protoc_insertion_point(destructor:scidb_msg.MpiSlaveHandshake)
  SharedDtor();
}

void MpiSlaveHandshake::SharedDtor() {
  if (cluster_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cluster_uuid_;
  }
  if (this != default_instance_) {
  }
}

void MpiSlaveHandshake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MpiSlaveHandshake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MpiSlaveHandshake_descriptor_;
}

const MpiSlaveHandshake& MpiSlaveHandshake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

MpiSlaveHandshake* MpiSlaveHandshake::default_instance_ = NULL;

MpiSlaveHandshake* MpiSlaveHandshake::New() const {
  return new MpiSlaveHandshake;
}

void MpiSlaveHandshake::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MpiSlaveHandshake*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(instance_id_, ppid_);
    if (has_cluster_uuid()) {
      if (cluster_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cluster_uuid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MpiSlaveHandshake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.MpiSlaveHandshake)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cluster_uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cluster_uuid().data(), this->cluster_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cluster_uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_instance_id;
        break;
      }

      // required uint64 instance_id = 2;
      case 2: {
        if (tag == 16) {
         parse_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_launch_id;
        break;
      }

      // required uint64 launch_id = 3;
      case 3: {
        if (tag == 24) {
         parse_launch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &launch_id_)));
          set_has_launch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }

      // required uint64 rank = 4;
      case 4: {
        if (tag == 32) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pid;
        break;
      }

      // required int32 pid = 5;
      case 5: {
        if (tag == 40) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ppid;
        break;
      }

      // required int32 ppid = 6;
      case 6: {
        if (tag == 48) {
         parse_ppid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ppid_)));
          set_has_ppid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.MpiSlaveHandshake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.MpiSlaveHandshake)
  return false;
#undef DO_
}

void MpiSlaveHandshake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.MpiSlaveHandshake)
  // required string cluster_uuid = 1;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster_uuid(), output);
  }

  // required uint64 instance_id = 2;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instance_id(), output);
  }

  // required uint64 launch_id = 3;
  if (has_launch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->launch_id(), output);
  }

  // required uint64 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->rank(), output);
  }

  // required int32 pid = 5;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pid(), output);
  }

  // required int32 ppid = 6;
  if (has_ppid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ppid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.MpiSlaveHandshake)
}

::google::protobuf::uint8* MpiSlaveHandshake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.MpiSlaveHandshake)
  // required string cluster_uuid = 1;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_uuid(), target);
  }

  // required uint64 instance_id = 2;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instance_id(), target);
  }

  // required uint64 launch_id = 3;
  if (has_launch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->launch_id(), target);
  }

  // required uint64 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->rank(), target);
  }

  // required int32 pid = 5;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pid(), target);
  }

  // required int32 ppid = 6;
  if (has_ppid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ppid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.MpiSlaveHandshake)
  return target;
}

int MpiSlaveHandshake::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cluster_uuid = 1;
    if (has_cluster_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_uuid());
    }

    // required uint64 instance_id = 2;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instance_id());
    }

    // required uint64 launch_id = 3;
    if (has_launch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->launch_id());
    }

    // required uint64 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rank());
    }

    // required int32 pid = 5;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // required int32 ppid = 6;
    if (has_ppid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ppid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MpiSlaveHandshake::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MpiSlaveHandshake* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MpiSlaveHandshake*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MpiSlaveHandshake::MergeFrom(const MpiSlaveHandshake& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster_uuid()) {
      set_cluster_uuid(from.cluster_uuid());
    }
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_launch_id()) {
      set_launch_id(from.launch_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_ppid()) {
      set_ppid(from.ppid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MpiSlaveHandshake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpiSlaveHandshake::CopyFrom(const MpiSlaveHandshake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpiSlaveHandshake::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void MpiSlaveHandshake::Swap(MpiSlaveHandshake* other) {
  if (other != this) {
    std::swap(cluster_uuid_, other->cluster_uuid_);
    std::swap(instance_id_, other->instance_id_);
    std::swap(launch_id_, other->launch_id_);
    std::swap(rank_, other->rank_);
    std::swap(pid_, other->pid_);
    std::swap(ppid_, other->ppid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MpiSlaveHandshake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MpiSlaveHandshake_descriptor_;
  metadata.reflection = MpiSlaveHandshake_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MpiSlaveResult::kLaunchIdFieldNumber;
const int MpiSlaveResult::kStatusFieldNumber;
#endif  // !_MSC_VER

MpiSlaveResult::MpiSlaveResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.MpiSlaveResult)
}

void MpiSlaveResult::InitAsDefaultInstance() {
}

MpiSlaveResult::MpiSlaveResult(const MpiSlaveResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.MpiSlaveResult)
}

void MpiSlaveResult::SharedCtor() {
  _cached_size_ = 0;
  launch_id_ = GOOGLE_ULONGLONG(0);
  status_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MpiSlaveResult::~MpiSlaveResult() {
  // @@protoc_insertion_point(destructor:scidb_msg.MpiSlaveResult)
  SharedDtor();
}

void MpiSlaveResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MpiSlaveResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MpiSlaveResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MpiSlaveResult_descriptor_;
}

const MpiSlaveResult& MpiSlaveResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

MpiSlaveResult* MpiSlaveResult::default_instance_ = NULL;

MpiSlaveResult* MpiSlaveResult::New() const {
  return new MpiSlaveResult;
}

void MpiSlaveResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MpiSlaveResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(launch_id_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MpiSlaveResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.MpiSlaveResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 launch_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &launch_id_)));
          set_has_launch_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required int64 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.MpiSlaveResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.MpiSlaveResult)
  return false;
#undef DO_
}

void MpiSlaveResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.MpiSlaveResult)
  // required uint64 launch_id = 1;
  if (has_launch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->launch_id(), output);
  }

  // required int64 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.MpiSlaveResult)
}

::google::protobuf::uint8* MpiSlaveResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.MpiSlaveResult)
  // required uint64 launch_id = 1;
  if (has_launch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->launch_id(), target);
  }

  // required int64 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.MpiSlaveResult)
  return target;
}

int MpiSlaveResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 launch_id = 1;
    if (has_launch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->launch_id());
    }

    // required int64 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MpiSlaveResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MpiSlaveResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MpiSlaveResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MpiSlaveResult::MergeFrom(const MpiSlaveResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_launch_id()) {
      set_launch_id(from.launch_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MpiSlaveResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpiSlaveResult::CopyFrom(const MpiSlaveResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpiSlaveResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MpiSlaveResult::Swap(MpiSlaveResult* other) {
  if (other != this) {
    std::swap(launch_id_, other->launch_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MpiSlaveResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MpiSlaveResult_descriptor_;
  metadata.reflection = MpiSlaveResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MpiSlaveCommand::kCommandFieldNumber;
const int MpiSlaveCommand::kArgsFieldNumber;
#endif  // !_MSC_VER

MpiSlaveCommand::MpiSlaveCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.MpiSlaveCommand)
}

void MpiSlaveCommand::InitAsDefaultInstance() {
}

MpiSlaveCommand::MpiSlaveCommand(const MpiSlaveCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.MpiSlaveCommand)
}

void MpiSlaveCommand::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MpiSlaveCommand::~MpiSlaveCommand() {
  // @@protoc_insertion_point(destructor:scidb_msg.MpiSlaveCommand)
  SharedDtor();
}

void MpiSlaveCommand::SharedDtor() {
  if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete command_;
  }
  if (this != default_instance_) {
  }
}

void MpiSlaveCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MpiSlaveCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MpiSlaveCommand_descriptor_;
}

const MpiSlaveCommand& MpiSlaveCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

MpiSlaveCommand* MpiSlaveCommand::default_instance_ = NULL;

MpiSlaveCommand* MpiSlaveCommand::New() const {
  return new MpiSlaveCommand;
}

void MpiSlaveCommand::Clear() {
  if (has_command()) {
    if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      command_->clear();
    }
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MpiSlaveCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.MpiSlaveCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "command");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }

      // repeated string args = 2;
      case 2: {
        if (tag == 18) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->args(this->args_size() - 1).data(),
            this->args(this->args_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "args");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_args;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.MpiSlaveCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.MpiSlaveCommand)
  return false;
#undef DO_
}

void MpiSlaveCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.MpiSlaveCommand)
  // required string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->command(), output);
  }

  // repeated string args = 2;
  for (int i = 0; i < this->args_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->args(i).data(), this->args(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "args");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->args(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.MpiSlaveCommand)
}

::google::protobuf::uint8* MpiSlaveCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.MpiSlaveCommand)
  // required string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }

  // repeated string args = 2;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args(i).data(), this->args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "args");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->args(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.MpiSlaveCommand)
  return target;
}

int MpiSlaveCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

  }
  // repeated string args = 2;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MpiSlaveCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MpiSlaveCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MpiSlaveCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MpiSlaveCommand::MergeFrom(const MpiSlaveCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MpiSlaveCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MpiSlaveCommand::CopyFrom(const MpiSlaveCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MpiSlaveCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MpiSlaveCommand::Swap(MpiSlaveCommand* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MpiSlaveCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MpiSlaveCommand_descriptor_;
  metadata.reflection = MpiSlaveCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthLogon::kUsernameFieldNumber;
const int AuthLogon::kPriorityFieldNumber;
const int AuthLogon::kAuthtagFieldNumber;
const int AuthLogon::kPuzzleFieldNumber;
const int AuthLogon::kSignatureFieldNumber;
#endif  // !_MSC_VER

AuthLogon::AuthLogon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.AuthLogon)
}

void AuthLogon::InitAsDefaultInstance() {
}

AuthLogon::AuthLogon(const AuthLogon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.AuthLogon)
}

void AuthLogon::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  priority_ = 0;
  authtag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  puzzle_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthLogon::~AuthLogon() {
  // @@protoc_insertion_point(destructor:scidb_msg.AuthLogon)
  SharedDtor();
}

void AuthLogon::SharedDtor() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (authtag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authtag_;
  }
  if (puzzle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete puzzle_;
  }
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void AuthLogon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthLogon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthLogon_descriptor_;
}

const AuthLogon& AuthLogon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

AuthLogon* AuthLogon::default_instance_ = NULL;

AuthLogon* AuthLogon::New() const {
  return new AuthLogon;
}

void AuthLogon::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    priority_ = 0;
    if (has_authtag()) {
      if (authtag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        authtag_->clear();
      }
    }
    if (has_puzzle()) {
      if (puzzle_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        puzzle_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthLogon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.AuthLogon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_priority;
        break;
      }

      // optional int32 priority = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_authtag;
        break;
      }

      // optional string authtag = 3;
      case 3: {
        if (tag == 26) {
         parse_authtag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authtag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authtag().data(), this->authtag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "authtag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_puzzle;
        break;
      }

      // optional bytes puzzle = 4;
      case 4: {
        if (tag == 34) {
         parse_puzzle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_puzzle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_signature;
        break;
      }

      // optional bytes signature = 5;
      case 5: {
        if (tag == 42) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.AuthLogon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.AuthLogon)
  return false;
#undef DO_
}

void AuthLogon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.AuthLogon)
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional int32 priority = 2 [default = 0];
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->priority(), output);
  }

  // optional string authtag = 3;
  if (has_authtag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authtag().data(), this->authtag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authtag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->authtag(), output);
  }

  // optional bytes puzzle = 4;
  if (has_puzzle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->puzzle(), output);
  }

  // optional bytes signature = 5;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.AuthLogon)
}

::google::protobuf::uint8* AuthLogon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.AuthLogon)
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional int32 priority = 2 [default = 0];
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->priority(), target);
  }

  // optional string authtag = 3;
  if (has_authtag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authtag().data(), this->authtag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authtag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->authtag(), target);
  }

  // optional bytes puzzle = 4;
  if (has_puzzle()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->puzzle(), target);
  }

  // optional bytes signature = 5;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.AuthLogon)
  return target;
}

int AuthLogon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional int32 priority = 2 [default = 0];
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional string authtag = 3;
    if (has_authtag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authtag());
    }

    // optional bytes puzzle = 4;
    if (has_puzzle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->puzzle());
    }

    // optional bytes signature = 5;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthLogon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthLogon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthLogon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthLogon::MergeFrom(const AuthLogon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_authtag()) {
      set_authtag(from.authtag());
    }
    if (from.has_puzzle()) {
      set_puzzle(from.puzzle());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthLogon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthLogon::CopyFrom(const AuthLogon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthLogon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthLogon::Swap(AuthLogon* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(priority_, other->priority_);
    std::swap(authtag_, other->authtag_);
    std::swap(puzzle_, other->puzzle_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthLogon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthLogon_descriptor_;
  metadata.reflection = AuthLogon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthChallenge::kCookieFieldNumber;
const int AuthChallenge::kMethodFieldNumber;
const int AuthChallenge::kCodeFieldNumber;
const int AuthChallenge::kTextFieldNumber;
#endif  // !_MSC_VER

AuthChallenge::AuthChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.AuthChallenge)
}

void AuthChallenge::InitAsDefaultInstance() {
}

AuthChallenge::AuthChallenge(const AuthChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.AuthChallenge)
}

void AuthChallenge::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cookie_ = 0u;
  method_ = 0;
  code_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthChallenge::~AuthChallenge() {
  // @@protoc_insertion_point(destructor:scidb_msg.AuthChallenge)
  SharedDtor();
}

void AuthChallenge::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void AuthChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthChallenge_descriptor_;
}

const AuthChallenge& AuthChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

AuthChallenge* AuthChallenge::default_instance_ = NULL;

AuthChallenge* AuthChallenge::New() const {
  return new AuthChallenge;
}

void AuthChallenge::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuthChallenge*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(cookie_, method_);
    code_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.AuthChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cookie = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cookie_)));
          set_has_cookie();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_method;
        break;
      }

      // optional sint32 method = 2;
      case 2: {
        if (tag == 16) {
         parse_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &method_)));
          set_has_method();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }

      // optional sint32 code = 3;
      case 3: {
        if (tag == 24) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_text;
        break;
      }

      // optional string text = 4;
      case 4: {
        if (tag == 34) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.AuthChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.AuthChallenge)
  return false;
#undef DO_
}

void AuthChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.AuthChallenge)
  // required uint32 cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cookie(), output);
  }

  // optional sint32 method = 2;
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->method(), output);
  }

  // optional sint32 code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->code(), output);
  }

  // optional string text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.AuthChallenge)
}

::google::protobuf::uint8* AuthChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.AuthChallenge)
  // required uint32 cookie = 1;
  if (has_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cookie(), target);
  }

  // optional sint32 method = 2;
  if (has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->method(), target);
  }

  // optional sint32 code = 3;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->code(), target);
  }

  // optional string text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.AuthChallenge)
  return target;
}

int AuthChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cookie());
    }

    // optional sint32 method = 2;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->method());
    }

    // optional sint32 code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->code());
    }

    // optional string text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthChallenge::MergeFrom(const AuthChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthChallenge::CopyFrom(const AuthChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthChallenge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthChallenge::Swap(AuthChallenge* other) {
  if (other != this) {
    std::swap(cookie_, other->cookie_);
    std::swap(method_, other->method_);
    std::swap(code_, other->code_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthChallenge_descriptor_;
  metadata.reflection = AuthChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthResponse::kCookieFieldNumber;
const int AuthResponse::kTextFieldNumber;
#endif  // !_MSC_VER

AuthResponse::AuthResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.AuthResponse)
}

void AuthResponse::InitAsDefaultInstance() {
}

AuthResponse::AuthResponse(const AuthResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.AuthResponse)
}

void AuthResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cookie_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthResponse::~AuthResponse() {
  // @@protoc_insertion_point(destructor:scidb_msg.AuthResponse)
  SharedDtor();
}

void AuthResponse::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void AuthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthResponse_descriptor_;
}

const AuthResponse& AuthResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

AuthResponse* AuthResponse::default_instance_ = NULL;

AuthResponse* AuthResponse::New() const {
  return new AuthResponse;
}

void AuthResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cookie_ = 0u;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.AuthResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cookie = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cookie_)));
          set_has_cookie();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.AuthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.AuthResponse)
  return false;
#undef DO_
}

void AuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.AuthResponse)
  // required uint32 cookie = 1;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cookie(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.AuthResponse)
}

::google::protobuf::uint8* AuthResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.AuthResponse)
  // required uint32 cookie = 1;
  if (has_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cookie(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.AuthResponse)
  return target;
}

int AuthResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cookie());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthResponse::MergeFrom(const AuthResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthResponse::CopyFrom(const AuthResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthResponse::Swap(AuthResponse* other) {
  if (other != this) {
    std::swap(cookie_, other->cookie_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthResponse_descriptor_;
  metadata.reflection = AuthResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthComplete::kAuthenticatedFieldNumber;
const int AuthComplete::kReasonFieldNumber;
#endif  // !_MSC_VER

AuthComplete::AuthComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.AuthComplete)
}

void AuthComplete::InitAsDefaultInstance() {
}

AuthComplete::AuthComplete(const AuthComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.AuthComplete)
}

void AuthComplete::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  authenticated_ = false;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthComplete::~AuthComplete() {
  // @@protoc_insertion_point(destructor:scidb_msg.AuthComplete)
  SharedDtor();
}

void AuthComplete::SharedDtor() {
  if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void AuthComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthComplete_descriptor_;
}

const AuthComplete& AuthComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

AuthComplete* AuthComplete::default_instance_ = NULL;

AuthComplete* AuthComplete::New() const {
  return new AuthComplete;
}

void AuthComplete::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    authenticated_ = false;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.AuthComplete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool authenticated = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &authenticated_)));
          set_has_authenticated();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (tag == 18) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reason");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.AuthComplete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.AuthComplete)
  return false;
#undef DO_
}

void AuthComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.AuthComplete)
  // required bool authenticated = 1;
  if (has_authenticated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->authenticated(), output);
  }

  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.AuthComplete)
}

::google::protobuf::uint8* AuthComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.AuthComplete)
  // required bool authenticated = 1;
  if (has_authenticated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->authenticated(), target);
  }

  // optional string reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.AuthComplete)
  return target;
}

int AuthComplete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool authenticated = 1;
    if (has_authenticated()) {
      total_size += 1 + 1;
    }

    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthComplete::MergeFrom(const AuthComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_authenticated()) {
      set_authenticated(from.authenticated());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthComplete::CopyFrom(const AuthComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthComplete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthComplete::Swap(AuthComplete* other) {
  if (other != this) {
    std::swap(authenticated_, other->authenticated_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthComplete_descriptor_;
  metadata.reflection = AuthComplete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Hangup::kCodeFieldNumber;
#endif  // !_MSC_VER

Hangup::Hangup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.Hangup)
}

void Hangup::InitAsDefaultInstance() {
}

Hangup::Hangup(const Hangup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.Hangup)
}

void Hangup::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hangup::~Hangup() {
  // @@protoc_insertion_point(destructor:scidb_msg.Hangup)
  SharedDtor();
}

void Hangup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Hangup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hangup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hangup_descriptor_;
}

const Hangup& Hangup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

Hangup* Hangup::default_instance_ = NULL;

Hangup* Hangup::New() const {
  return new Hangup;
}

void Hangup::Clear() {
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hangup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.Hangup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.Hangup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.Hangup)
  return false;
#undef DO_
}

void Hangup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.Hangup)
  // optional sint32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.Hangup)
}

::google::protobuf::uint8* Hangup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.Hangup)
  // optional sint32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.Hangup)
  return target;
}

int Hangup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hangup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hangup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hangup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hangup::MergeFrom(const Hangup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hangup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hangup::CopyFrom(const Hangup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hangup::IsInitialized() const {

  return true;
}

void Hangup::Swap(Hangup* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hangup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hangup_descriptor_;
  metadata.reflection = Hangup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Liveness_InstanceListEntry::kInstanceIdFieldNumber;
const int Liveness_InstanceListEntry::kGenIdFieldNumber;
#endif  // !_MSC_VER

Liveness_InstanceListEntry::Liveness_InstanceListEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.Liveness.InstanceListEntry)
}

void Liveness_InstanceListEntry::InitAsDefaultInstance() {
}

Liveness_InstanceListEntry::Liveness_InstanceListEntry(const Liveness_InstanceListEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.Liveness.InstanceListEntry)
}

void Liveness_InstanceListEntry::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = GOOGLE_ULONGLONG(0);
  gen_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Liveness_InstanceListEntry::~Liveness_InstanceListEntry() {
  // @@protoc_insertion_point(destructor:scidb_msg.Liveness.InstanceListEntry)
  SharedDtor();
}

void Liveness_InstanceListEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Liveness_InstanceListEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Liveness_InstanceListEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Liveness_InstanceListEntry_descriptor_;
}

const Liveness_InstanceListEntry& Liveness_InstanceListEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

Liveness_InstanceListEntry* Liveness_InstanceListEntry::default_instance_ = NULL;

Liveness_InstanceListEntry* Liveness_InstanceListEntry::New() const {
  return new Liveness_InstanceListEntry;
}

void Liveness_InstanceListEntry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Liveness_InstanceListEntry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(instance_id_, gen_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Liveness_InstanceListEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.Liveness.InstanceListEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 instance_id = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gen_id;
        break;
      }

      // required uint64 gen_id = 3;
      case 3: {
        if (tag == 24) {
         parse_gen_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gen_id_)));
          set_has_gen_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.Liveness.InstanceListEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.Liveness.InstanceListEntry)
  return false;
#undef DO_
}

void Liveness_InstanceListEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.Liveness.InstanceListEntry)
  // required uint64 instance_id = 2;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instance_id(), output);
  }

  // required uint64 gen_id = 3;
  if (has_gen_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->gen_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.Liveness.InstanceListEntry)
}

::google::protobuf::uint8* Liveness_InstanceListEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.Liveness.InstanceListEntry)
  // required uint64 instance_id = 2;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instance_id(), target);
  }

  // required uint64 gen_id = 3;
  if (has_gen_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->gen_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.Liveness.InstanceListEntry)
  return target;
}

int Liveness_InstanceListEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 instance_id = 2;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instance_id());
    }

    // required uint64 gen_id = 3;
    if (has_gen_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gen_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Liveness_InstanceListEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Liveness_InstanceListEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Liveness_InstanceListEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Liveness_InstanceListEntry::MergeFrom(const Liveness_InstanceListEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_gen_id()) {
      set_gen_id(from.gen_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Liveness_InstanceListEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Liveness_InstanceListEntry::CopyFrom(const Liveness_InstanceListEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Liveness_InstanceListEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Liveness_InstanceListEntry::Swap(Liveness_InstanceListEntry* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(gen_id_, other->gen_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Liveness_InstanceListEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Liveness_InstanceListEntry_descriptor_;
  metadata.reflection = Liveness_InstanceListEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Liveness_InstanceList::kInstanceEntryFieldNumber;
#endif  // !_MSC_VER

Liveness_InstanceList::Liveness_InstanceList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.Liveness.InstanceList)
}

void Liveness_InstanceList::InitAsDefaultInstance() {
}

Liveness_InstanceList::Liveness_InstanceList(const Liveness_InstanceList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.Liveness.InstanceList)
}

void Liveness_InstanceList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Liveness_InstanceList::~Liveness_InstanceList() {
  // @@protoc_insertion_point(destructor:scidb_msg.Liveness.InstanceList)
  SharedDtor();
}

void Liveness_InstanceList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Liveness_InstanceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Liveness_InstanceList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Liveness_InstanceList_descriptor_;
}

const Liveness_InstanceList& Liveness_InstanceList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

Liveness_InstanceList* Liveness_InstanceList::default_instance_ = NULL;

Liveness_InstanceList* Liveness_InstanceList::New() const {
  return new Liveness_InstanceList;
}

void Liveness_InstanceList::Clear() {
  instance_entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Liveness_InstanceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.Liveness.InstanceList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .scidb_msg.Liveness.InstanceListEntry instance_entry = 2;
      case 2: {
        if (tag == 18) {
         parse_instance_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instance_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_instance_entry;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.Liveness.InstanceList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.Liveness.InstanceList)
  return false;
#undef DO_
}

void Liveness_InstanceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.Liveness.InstanceList)
  // repeated .scidb_msg.Liveness.InstanceListEntry instance_entry = 2;
  for (int i = 0; i < this->instance_entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->instance_entry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.Liveness.InstanceList)
}

::google::protobuf::uint8* Liveness_InstanceList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.Liveness.InstanceList)
  // repeated .scidb_msg.Liveness.InstanceListEntry instance_entry = 2;
  for (int i = 0; i < this->instance_entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->instance_entry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.Liveness.InstanceList)
  return target;
}

int Liveness_InstanceList::ByteSize() const {
  int total_size = 0;

  // repeated .scidb_msg.Liveness.InstanceListEntry instance_entry = 2;
  total_size += 1 * this->instance_entry_size();
  for (int i = 0; i < this->instance_entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instance_entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Liveness_InstanceList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Liveness_InstanceList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Liveness_InstanceList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Liveness_InstanceList::MergeFrom(const Liveness_InstanceList& from) {
  GOOGLE_CHECK_NE(&from, this);
  instance_entry_.MergeFrom(from.instance_entry_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Liveness_InstanceList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Liveness_InstanceList::CopyFrom(const Liveness_InstanceList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Liveness_InstanceList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->instance_entry())) return false;
  return true;
}

void Liveness_InstanceList::Swap(Liveness_InstanceList* other) {
  if (other != this) {
    instance_entry_.Swap(&other->instance_entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Liveness_InstanceList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Liveness_InstanceList_descriptor_;
  metadata.reflection = Liveness_InstanceList_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Liveness::kClusterUuidFieldNumber;
const int Liveness::kMembershipIdFieldNumber;
const int Liveness::kVersionFieldNumber;
const int Liveness::kDeadListFieldNumber;
const int Liveness::kLiveListFieldNumber;
#endif  // !_MSC_VER

Liveness::Liveness()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.Liveness)
}

void Liveness::InitAsDefaultInstance() {
  dead_list_ = const_cast< ::scidb_msg::Liveness_InstanceList*>(&::scidb_msg::Liveness_InstanceList::default_instance());
  live_list_ = const_cast< ::scidb_msg::Liveness_InstanceList*>(&::scidb_msg::Liveness_InstanceList::default_instance());
}

Liveness::Liveness(const Liveness& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.Liveness)
}

void Liveness::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  membership_id_ = GOOGLE_ULONGLONG(0);
  version_ = GOOGLE_ULONGLONG(0);
  dead_list_ = NULL;
  live_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Liveness::~Liveness() {
  // @@protoc_insertion_point(destructor:scidb_msg.Liveness)
  SharedDtor();
}

void Liveness::SharedDtor() {
  if (cluster_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cluster_uuid_;
  }
  if (this != default_instance_) {
    delete dead_list_;
    delete live_list_;
  }
}

void Liveness::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Liveness::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Liveness_descriptor_;
}

const Liveness& Liveness::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

Liveness* Liveness::default_instance_ = NULL;

Liveness* Liveness::New() const {
  return new Liveness;
}

void Liveness::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Liveness*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(membership_id_, version_);
    if (has_cluster_uuid()) {
      if (cluster_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cluster_uuid_->clear();
      }
    }
    if (has_dead_list()) {
      if (dead_list_ != NULL) dead_list_->::scidb_msg::Liveness_InstanceList::Clear();
    }
    if (has_live_list()) {
      if (live_list_ != NULL) live_list_->::scidb_msg::Liveness_InstanceList::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Liveness::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.Liveness)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 version = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_membership_id;
        break;
      }

      // required uint64 membership_id = 3;
      case 3: {
        if (tag == 24) {
         parse_membership_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &membership_id_)));
          set_has_membership_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dead_list;
        break;
      }

      // required .scidb_msg.Liveness.InstanceList dead_list = 4;
      case 4: {
        if (tag == 34) {
         parse_dead_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dead_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_live_list;
        break;
      }

      // required .scidb_msg.Liveness.InstanceList live_list = 5;
      case 5: {
        if (tag == 42) {
         parse_live_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_live_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_cluster_uuid;
        break;
      }

      // required string cluster_uuid = 6;
      case 6: {
        if (tag == 50) {
         parse_cluster_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cluster_uuid().data(), this->cluster_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cluster_uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.Liveness)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.Liveness)
  return false;
#undef DO_
}

void Liveness::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.Liveness)
  // required uint64 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->version(), output);
  }

  // required uint64 membership_id = 3;
  if (has_membership_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->membership_id(), output);
  }

  // required .scidb_msg.Liveness.InstanceList dead_list = 4;
  if (has_dead_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dead_list(), output);
  }

  // required .scidb_msg.Liveness.InstanceList live_list = 5;
  if (has_live_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->live_list(), output);
  }

  // required string cluster_uuid = 6;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->cluster_uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.Liveness)
}

::google::protobuf::uint8* Liveness::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.Liveness)
  // required uint64 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->version(), target);
  }

  // required uint64 membership_id = 3;
  if (has_membership_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->membership_id(), target);
  }

  // required .scidb_msg.Liveness.InstanceList dead_list = 4;
  if (has_dead_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dead_list(), target);
  }

  // required .scidb_msg.Liveness.InstanceList live_list = 5;
  if (has_live_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->live_list(), target);
  }

  // required string cluster_uuid = 6;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->cluster_uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.Liveness)
  return target;
}

int Liveness::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cluster_uuid = 6;
    if (has_cluster_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_uuid());
    }

    // required uint64 membership_id = 3;
    if (has_membership_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->membership_id());
    }

    // required uint64 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

    // required .scidb_msg.Liveness.InstanceList dead_list = 4;
    if (has_dead_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dead_list());
    }

    // required .scidb_msg.Liveness.InstanceList live_list = 5;
    if (has_live_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->live_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Liveness::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Liveness* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Liveness*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Liveness::MergeFrom(const Liveness& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster_uuid()) {
      set_cluster_uuid(from.cluster_uuid());
    }
    if (from.has_membership_id()) {
      set_membership_id(from.membership_id());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_dead_list()) {
      mutable_dead_list()->::scidb_msg::Liveness_InstanceList::MergeFrom(from.dead_list());
    }
    if (from.has_live_list()) {
      mutable_live_list()->::scidb_msg::Liveness_InstanceList::MergeFrom(from.live_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Liveness::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Liveness::CopyFrom(const Liveness& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Liveness::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_dead_list()) {
    if (!this->dead_list().IsInitialized()) return false;
  }
  if (has_live_list()) {
    if (!this->live_list().IsInitialized()) return false;
  }
  return true;
}

void Liveness::Swap(Liveness* other) {
  if (other != this) {
    std::swap(cluster_uuid_, other->cluster_uuid_);
    std::swap(membership_id_, other->membership_id_);
    std::swap(version_, other->version_);
    std::swap(dead_list_, other->dead_list_);
    std::swap(live_list_, other->live_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Liveness::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Liveness_descriptor_;
  metadata.reflection = Liveness_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LivenessAck::kLivenessFieldNumber;
const int LivenessAck::kRequestVersionFieldNumber;
#endif  // !_MSC_VER

LivenessAck::LivenessAck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.LivenessAck)
}

void LivenessAck::InitAsDefaultInstance() {
  liveness_ = const_cast< ::scidb_msg::Liveness*>(&::scidb_msg::Liveness::default_instance());
}

LivenessAck::LivenessAck(const LivenessAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.LivenessAck)
}

void LivenessAck::SharedCtor() {
  _cached_size_ = 0;
  liveness_ = NULL;
  request_version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LivenessAck::~LivenessAck() {
  // @@protoc_insertion_point(destructor:scidb_msg.LivenessAck)
  SharedDtor();
}

void LivenessAck::SharedDtor() {
  if (this != default_instance_) {
    delete liveness_;
  }
}

void LivenessAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LivenessAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LivenessAck_descriptor_;
}

const LivenessAck& LivenessAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

LivenessAck* LivenessAck::default_instance_ = NULL;

LivenessAck* LivenessAck::New() const {
  return new LivenessAck;
}

void LivenessAck::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_liveness()) {
      if (liveness_ != NULL) liveness_->::scidb_msg::Liveness::Clear();
    }
    request_version_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LivenessAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.LivenessAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .scidb_msg.Liveness liveness = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_liveness()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_request_version;
        break;
      }

      // required uint64 request_version = 3;
      case 3: {
        if (tag == 24) {
         parse_request_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_version_)));
          set_has_request_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.LivenessAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.LivenessAck)
  return false;
#undef DO_
}

void LivenessAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.LivenessAck)
  // required .scidb_msg.Liveness liveness = 2;
  if (has_liveness()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->liveness(), output);
  }

  // required uint64 request_version = 3;
  if (has_request_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->request_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.LivenessAck)
}

::google::protobuf::uint8* LivenessAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.LivenessAck)
  // required .scidb_msg.Liveness liveness = 2;
  if (has_liveness()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->liveness(), target);
  }

  // required uint64 request_version = 3;
  if (has_request_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->request_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.LivenessAck)
  return target;
}

int LivenessAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .scidb_msg.Liveness liveness = 2;
    if (has_liveness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->liveness());
    }

    // required uint64 request_version = 3;
    if (has_request_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LivenessAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LivenessAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LivenessAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LivenessAck::MergeFrom(const LivenessAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_liveness()) {
      mutable_liveness()->::scidb_msg::Liveness::MergeFrom(from.liveness());
    }
    if (from.has_request_version()) {
      set_request_version(from.request_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LivenessAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LivenessAck::CopyFrom(const LivenessAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LivenessAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_liveness()) {
    if (!this->liveness().IsInitialized()) return false;
  }
  return true;
}

void LivenessAck::Swap(LivenessAck* other) {
  if (other != this) {
    std::swap(liveness_, other->liveness_);
    std::swap(request_version_, other->request_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LivenessAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LivenessAck_descriptor_;
  metadata.reflection = LivenessAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LivenessVector_VersionEntry::kInstanceIdFieldNumber;
const int LivenessVector_VersionEntry::kVersionFieldNumber;
#endif  // !_MSC_VER

LivenessVector_VersionEntry::LivenessVector_VersionEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.LivenessVector.VersionEntry)
}

void LivenessVector_VersionEntry::InitAsDefaultInstance() {
}

LivenessVector_VersionEntry::LivenessVector_VersionEntry(const LivenessVector_VersionEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.LivenessVector.VersionEntry)
}

void LivenessVector_VersionEntry::SharedCtor() {
  _cached_size_ = 0;
  instance_id_ = GOOGLE_ULONGLONG(0);
  version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LivenessVector_VersionEntry::~LivenessVector_VersionEntry() {
  // @@protoc_insertion_point(destructor:scidb_msg.LivenessVector.VersionEntry)
  SharedDtor();
}

void LivenessVector_VersionEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LivenessVector_VersionEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LivenessVector_VersionEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LivenessVector_VersionEntry_descriptor_;
}

const LivenessVector_VersionEntry& LivenessVector_VersionEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

LivenessVector_VersionEntry* LivenessVector_VersionEntry::default_instance_ = NULL;

LivenessVector_VersionEntry* LivenessVector_VersionEntry::New() const {
  return new LivenessVector_VersionEntry;
}

void LivenessVector_VersionEntry::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LivenessVector_VersionEntry*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(instance_id_, version_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LivenessVector_VersionEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.LivenessVector.VersionEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 instance_id = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // required uint64 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.LivenessVector.VersionEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.LivenessVector.VersionEntry)
  return false;
#undef DO_
}

void LivenessVector_VersionEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.LivenessVector.VersionEntry)
  // required uint64 instance_id = 2;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instance_id(), output);
  }

  // required uint64 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.LivenessVector.VersionEntry)
}

::google::protobuf::uint8* LivenessVector_VersionEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.LivenessVector.VersionEntry)
  // required uint64 instance_id = 2;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instance_id(), target);
  }

  // required uint64 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.LivenessVector.VersionEntry)
  return target;
}

int LivenessVector_VersionEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 instance_id = 2;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instance_id());
    }

    // required uint64 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LivenessVector_VersionEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LivenessVector_VersionEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LivenessVector_VersionEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LivenessVector_VersionEntry::MergeFrom(const LivenessVector_VersionEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LivenessVector_VersionEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LivenessVector_VersionEntry::CopyFrom(const LivenessVector_VersionEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LivenessVector_VersionEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LivenessVector_VersionEntry::Swap(LivenessVector_VersionEntry* other) {
  if (other != this) {
    std::swap(instance_id_, other->instance_id_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LivenessVector_VersionEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LivenessVector_VersionEntry_descriptor_;
  metadata.reflection = LivenessVector_VersionEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LivenessVector_Versions::kVersionEntryFieldNumber;
#endif  // !_MSC_VER

LivenessVector_Versions::LivenessVector_Versions()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.LivenessVector.Versions)
}

void LivenessVector_Versions::InitAsDefaultInstance() {
}

LivenessVector_Versions::LivenessVector_Versions(const LivenessVector_Versions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.LivenessVector.Versions)
}

void LivenessVector_Versions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LivenessVector_Versions::~LivenessVector_Versions() {
  // @@protoc_insertion_point(destructor:scidb_msg.LivenessVector.Versions)
  SharedDtor();
}

void LivenessVector_Versions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LivenessVector_Versions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LivenessVector_Versions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LivenessVector_Versions_descriptor_;
}

const LivenessVector_Versions& LivenessVector_Versions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

LivenessVector_Versions* LivenessVector_Versions::default_instance_ = NULL;

LivenessVector_Versions* LivenessVector_Versions::New() const {
  return new LivenessVector_Versions;
}

void LivenessVector_Versions::Clear() {
  version_entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LivenessVector_Versions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.LivenessVector.Versions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .scidb_msg.LivenessVector.VersionEntry version_entry = 2;
      case 2: {
        if (tag == 18) {
         parse_version_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_version_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version_entry;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.LivenessVector.Versions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.LivenessVector.Versions)
  return false;
#undef DO_
}

void LivenessVector_Versions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.LivenessVector.Versions)
  // repeated .scidb_msg.LivenessVector.VersionEntry version_entry = 2;
  for (int i = 0; i < this->version_entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->version_entry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.LivenessVector.Versions)
}

::google::protobuf::uint8* LivenessVector_Versions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.LivenessVector.Versions)
  // repeated .scidb_msg.LivenessVector.VersionEntry version_entry = 2;
  for (int i = 0; i < this->version_entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->version_entry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.LivenessVector.Versions)
  return target;
}

int LivenessVector_Versions::ByteSize() const {
  int total_size = 0;

  // repeated .scidb_msg.LivenessVector.VersionEntry version_entry = 2;
  total_size += 1 * this->version_entry_size();
  for (int i = 0; i < this->version_entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->version_entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LivenessVector_Versions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LivenessVector_Versions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LivenessVector_Versions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LivenessVector_Versions::MergeFrom(const LivenessVector_Versions& from) {
  GOOGLE_CHECK_NE(&from, this);
  version_entry_.MergeFrom(from.version_entry_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LivenessVector_Versions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LivenessVector_Versions::CopyFrom(const LivenessVector_Versions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LivenessVector_Versions::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->version_entry())) return false;
  return true;
}

void LivenessVector_Versions::Swap(LivenessVector_Versions* other) {
  if (other != this) {
    version_entry_.Swap(&other->version_entry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LivenessVector_Versions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LivenessVector_Versions_descriptor_;
  metadata.reflection = LivenessVector_Versions_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LivenessVector::kClusterUuidFieldNumber;
const int LivenessVector::kVersionsFieldNumber;
#endif  // !_MSC_VER

LivenessVector::LivenessVector()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.LivenessVector)
}

void LivenessVector::InitAsDefaultInstance() {
  versions_ = const_cast< ::scidb_msg::LivenessVector_Versions*>(&::scidb_msg::LivenessVector_Versions::default_instance());
}

LivenessVector::LivenessVector(const LivenessVector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.LivenessVector)
}

void LivenessVector::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cluster_uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  versions_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LivenessVector::~LivenessVector() {
  // @@protoc_insertion_point(destructor:scidb_msg.LivenessVector)
  SharedDtor();
}

void LivenessVector::SharedDtor() {
  if (cluster_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cluster_uuid_;
  }
  if (this != default_instance_) {
    delete versions_;
  }
}

void LivenessVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LivenessVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LivenessVector_descriptor_;
}

const LivenessVector& LivenessVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

LivenessVector* LivenessVector::default_instance_ = NULL;

LivenessVector* LivenessVector::New() const {
  return new LivenessVector;
}

void LivenessVector::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_cluster_uuid()) {
      if (cluster_uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cluster_uuid_->clear();
      }
    }
    if (has_versions()) {
      if (versions_ != NULL) versions_->::scidb_msg::LivenessVector_Versions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LivenessVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.LivenessVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cluster_uuid = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cluster_uuid().data(), this->cluster_uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cluster_uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_versions;
        break;
      }

      // required .scidb_msg.LivenessVector.Versions versions = 3;
      case 3: {
        if (tag == 26) {
         parse_versions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_versions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.LivenessVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.LivenessVector)
  return false;
#undef DO_
}

void LivenessVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.LivenessVector)
  // required string cluster_uuid = 2;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cluster_uuid(), output);
  }

  // required .scidb_msg.LivenessVector.Versions versions = 3;
  if (has_versions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->versions(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.LivenessVector)
}

::google::protobuf::uint8* LivenessVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.LivenessVector)
  // required string cluster_uuid = 2;
  if (has_cluster_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_uuid().data(), this->cluster_uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cluster_uuid(), target);
  }

  // required .scidb_msg.LivenessVector.Versions versions = 3;
  if (has_versions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->versions(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.LivenessVector)
  return target;
}

int LivenessVector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cluster_uuid = 2;
    if (has_cluster_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_uuid());
    }

    // required .scidb_msg.LivenessVector.Versions versions = 3;
    if (has_versions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->versions());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LivenessVector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LivenessVector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LivenessVector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LivenessVector::MergeFrom(const LivenessVector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster_uuid()) {
      set_cluster_uuid(from.cluster_uuid());
    }
    if (from.has_versions()) {
      mutable_versions()->::scidb_msg::LivenessVector_Versions::MergeFrom(from.versions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LivenessVector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LivenessVector::CopyFrom(const LivenessVector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LivenessVector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_versions()) {
    if (!this->versions().IsInitialized()) return false;
  }
  return true;
}

void LivenessVector::Swap(LivenessVector* other) {
  if (other != this) {
    std::swap(cluster_uuid_, other->cluster_uuid_);
    std::swap(versions_, other->versions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LivenessVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LivenessVector_descriptor_;
  metadata.reflection = LivenessVector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderedBcastRequest::kTimestampFieldNumber;
const int OrderedBcastRequest::kPayloadMessageTypeFieldNumber;
const int OrderedBcastRequest::kPayloadMessageFieldNumber;
const int OrderedBcastRequest::kVectorFieldNumber;
#endif  // !_MSC_VER

OrderedBcastRequest::OrderedBcastRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.OrderedBcastRequest)
}

void OrderedBcastRequest::InitAsDefaultInstance() {
  vector_ = const_cast< ::scidb_msg::LivenessVector*>(&::scidb_msg::LivenessVector::default_instance());
}

OrderedBcastRequest::OrderedBcastRequest(const OrderedBcastRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.OrderedBcastRequest)
}

void OrderedBcastRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  payload_message_type_ = 0u;
  payload_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vector_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderedBcastRequest::~OrderedBcastRequest() {
  // @@protoc_insertion_point(destructor:scidb_msg.OrderedBcastRequest)
  SharedDtor();
}

void OrderedBcastRequest::SharedDtor() {
  if (payload_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_message_;
  }
  if (this != default_instance_) {
    delete vector_;
  }
}

void OrderedBcastRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderedBcastRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderedBcastRequest_descriptor_;
}

const OrderedBcastRequest& OrderedBcastRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

OrderedBcastRequest* OrderedBcastRequest::default_instance_ = NULL;

OrderedBcastRequest* OrderedBcastRequest::New() const {
  return new OrderedBcastRequest;
}

void OrderedBcastRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    timestamp_ = GOOGLE_ULONGLONG(0);
    payload_message_type_ = 0u;
    if (has_payload_message()) {
      if (payload_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        payload_message_->clear();
      }
    }
    if (has_vector()) {
      if (vector_ != NULL) vector_->::scidb_msg::LivenessVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderedBcastRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.OrderedBcastRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_payload_message_type;
        break;
      }

      // required uint32 payload_message_type = 2;
      case 2: {
        if (tag == 16) {
         parse_payload_message_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payload_message_type_)));
          set_has_payload_message_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_payload_message;
        break;
      }

      // required bytes payload_message = 3;
      case 3: {
        if (tag == 26) {
         parse_payload_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vector;
        break;
      }

      // required .scidb_msg.LivenessVector vector = 4;
      case 4: {
        if (tag == 34) {
         parse_vector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vector()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.OrderedBcastRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.OrderedBcastRequest)
  return false;
#undef DO_
}

void OrderedBcastRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.OrderedBcastRequest)
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // required uint32 payload_message_type = 2;
  if (has_payload_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->payload_message_type(), output);
  }

  // required bytes payload_message = 3;
  if (has_payload_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->payload_message(), output);
  }

  // required .scidb_msg.LivenessVector vector = 4;
  if (has_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vector(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.OrderedBcastRequest)
}

::google::protobuf::uint8* OrderedBcastRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.OrderedBcastRequest)
  // required uint64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // required uint32 payload_message_type = 2;
  if (has_payload_message_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->payload_message_type(), target);
  }

  // required bytes payload_message = 3;
  if (has_payload_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->payload_message(), target);
  }

  // required .scidb_msg.LivenessVector vector = 4;
  if (has_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->vector(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.OrderedBcastRequest)
  return target;
}

int OrderedBcastRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // required uint32 payload_message_type = 2;
    if (has_payload_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payload_message_type());
    }

    // required bytes payload_message = 3;
    if (has_payload_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload_message());
    }

    // required .scidb_msg.LivenessVector vector = 4;
    if (has_vector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vector());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderedBcastRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderedBcastRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderedBcastRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderedBcastRequest::MergeFrom(const OrderedBcastRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_payload_message_type()) {
      set_payload_message_type(from.payload_message_type());
    }
    if (from.has_payload_message()) {
      set_payload_message(from.payload_message());
    }
    if (from.has_vector()) {
      mutable_vector()->::scidb_msg::LivenessVector::MergeFrom(from.vector());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderedBcastRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderedBcastRequest::CopyFrom(const OrderedBcastRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderedBcastRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_vector()) {
    if (!this->vector().IsInitialized()) return false;
  }
  return true;
}

void OrderedBcastRequest::Swap(OrderedBcastRequest* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(payload_message_type_, other->payload_message_type_);
    std::swap(payload_message_, other->payload_message_);
    std::swap(vector_, other->vector_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderedBcastRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderedBcastRequest_descriptor_;
  metadata.reflection = OrderedBcastRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderedBcastReply::kRequestTimestampFieldNumber;
const int OrderedBcastReply::kRequestInstanceFieldNumber;
const int OrderedBcastReply::kTimestampFieldNumber;
const int OrderedBcastReply::kVectorFieldNumber;
#endif  // !_MSC_VER

OrderedBcastReply::OrderedBcastReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scidb_msg.OrderedBcastReply)
}

void OrderedBcastReply::InitAsDefaultInstance() {
  vector_ = const_cast< ::scidb_msg::LivenessVector*>(&::scidb_msg::LivenessVector::default_instance());
}

OrderedBcastReply::OrderedBcastReply(const OrderedBcastReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scidb_msg.OrderedBcastReply)
}

void OrderedBcastReply::SharedCtor() {
  _cached_size_ = 0;
  request_timestamp_ = GOOGLE_ULONGLONG(0);
  request_instance_ = GOOGLE_ULONGLONG(0);
  timestamp_ = GOOGLE_ULONGLONG(0);
  vector_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderedBcastReply::~OrderedBcastReply() {
  // @@protoc_insertion_point(destructor:scidb_msg.OrderedBcastReply)
  SharedDtor();
}

void OrderedBcastReply::SharedDtor() {
  if (this != default_instance_) {
    delete vector_;
  }
}

void OrderedBcastReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderedBcastReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderedBcastReply_descriptor_;
}

const OrderedBcastReply& OrderedBcastReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scidb_5fmsg_2eproto();
  return *default_instance_;
}

OrderedBcastReply* OrderedBcastReply::default_instance_ = NULL;

OrderedBcastReply* OrderedBcastReply::New() const {
  return new OrderedBcastReply;
}

void OrderedBcastReply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrderedBcastReply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(request_timestamp_, timestamp_);
    if (has_vector()) {
      if (vector_ != NULL) vector_->::scidb_msg::LivenessVector::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderedBcastReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scidb_msg.OrderedBcastReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 request_timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_timestamp_)));
          set_has_request_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_request_instance;
        break;
      }

      // required uint64 request_instance = 2;
      case 2: {
        if (tag == 16) {
         parse_request_instance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_instance_)));
          set_has_request_instance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // required uint64 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vector;
        break;
      }

      // required .scidb_msg.LivenessVector vector = 4;
      case 4: {
        if (tag == 34) {
         parse_vector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vector()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scidb_msg.OrderedBcastReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scidb_msg.OrderedBcastReply)
  return false;
#undef DO_
}

void OrderedBcastReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scidb_msg.OrderedBcastReply)
  // required uint64 request_timestamp = 1;
  if (has_request_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->request_timestamp(), output);
  }

  // required uint64 request_instance = 2;
  if (has_request_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->request_instance(), output);
  }

  // required uint64 timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // required .scidb_msg.LivenessVector vector = 4;
  if (has_vector()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vector(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scidb_msg.OrderedBcastReply)
}

::google::protobuf::uint8* OrderedBcastReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scidb_msg.OrderedBcastReply)
  // required uint64 request_timestamp = 1;
  if (has_request_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->request_timestamp(), target);
  }

  // required uint64 request_instance = 2;
  if (has_request_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->request_instance(), target);
  }

  // required uint64 timestamp = 3;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // required .scidb_msg.LivenessVector vector = 4;
  if (has_vector()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->vector(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scidb_msg.OrderedBcastReply)
  return target;
}

int OrderedBcastReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 request_timestamp = 1;
    if (has_request_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_timestamp());
    }

    // required uint64 request_instance = 2;
    if (has_request_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->request_instance());
    }

    // required uint64 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // required .scidb_msg.LivenessVector vector = 4;
    if (has_vector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vector());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderedBcastReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderedBcastReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderedBcastReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderedBcastReply::MergeFrom(const OrderedBcastReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_timestamp()) {
      set_request_timestamp(from.request_timestamp());
    }
    if (from.has_request_instance()) {
      set_request_instance(from.request_instance());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_vector()) {
      mutable_vector()->::scidb_msg::LivenessVector::MergeFrom(from.vector());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderedBcastReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderedBcastReply::CopyFrom(const OrderedBcastReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderedBcastReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_vector()) {
    if (!this->vector().IsInitialized()) return false;
  }
  return true;
}

void OrderedBcastReply::Swap(OrderedBcastReply* other) {
  if (other != this) {
    std::swap(request_timestamp_, other->request_timestamp_);
    std::swap(request_instance_, other->request_instance_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(vector_, other->vector_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderedBcastReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderedBcastReply_descriptor_;
  metadata.reflection = OrderedBcastReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace scidb_msg

// @@protoc_insertion_point(global_scope)
