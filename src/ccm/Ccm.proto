/*
**
* BEGIN_COPYRIGHT
*
* Copyright (C) 2008-2019 SciDB, Inc.
* All Rights Reserved.
*
* SciDB is free software: you can redistribute it and/or modify
* it under the terms of the AFFERO GNU General Public License as published by
* the Free Software Foundation.
*
* SciDB is distributed "AS-IS" AND WITHOUT ANY WARRANTY OF ANY KIND,
* INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY,
* NON-INFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE. See
* the AFFERO GNU General Public License for the complete license terms.
*
* You should have received a copy of the AFFERO GNU General Public License
* along with SciDB.  If not, see <http://www.gnu.org/licenses/agpl-3.0.html>
*
* END_COPYRIGHT
*/

/**
 * @file scidb_msg.proto
 * @brief Definitions of Google protobuf messages used by SciDB.
 * @see http://code.google.com/apis/protocolbuffers/docs/proto.html
 * @note We use protobufs version 2.
 */

syntax = "proto2";

package scidb.ccm.msg;

message Error {
  optional uint32 code = 1;
  optional string text = 2;
}

/**
 * Client -> CCM
 * Client sends this as the first message on a new connection to begin the
 * authentication process.
 */
message AuthLogon {
  optional string username = 1;
  // Phase 2: Should we send optional properties as a container, or individual property
  // values
  // optional uint64 time_out = 2;  // the session time-out (override)
  // optional ??? priority = 3;    // The  session priority
  //  // OR
  // optional SessionProperties properties = 2;
}

/**
 * Server -> CCM
 * Authentication challenge: riddle me this, Batman?!
 */
message AuthChallenge {
  optional string challenge = 1;
  optional string cookie = 2;  // generated by server for handshake
}

/**
 * Client -> CCM
 * Response to AuthChallenge
 */
message AuthResponse {
  optional string answer = 1;  // the answer to the challenge
  optional string cookie = 2;  // needs to match cookie issued in AuthChallenge
}

/**
 * CCM -> Client
 * Send ACK/NACK when authentication is complete.
 */
message AuthComplete {
  optional bool authenticated = 1;
  optional string reason = 2;
}

message ExecuteQuery {
  optional string query = 1;
  optional string ingot_format = 2;  // csv, tsv, apache arrow, etc.
}

message ExecuteQueryResponse {
  optional string conversation_id = 1;
  optional bool status = 2;
}

message FetchIngot {
  optional string conversation_id = 1;
}

message FetchIngotResponse {
  optional string conversation_id = 1;
  optional bool more = 2;
  optional uint64 binary_size = 3;
}

message CancelConversation {
  optional string conversation_id = 1;
}
